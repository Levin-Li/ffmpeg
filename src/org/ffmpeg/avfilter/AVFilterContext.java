package org.ffmpeg.avfilter;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.ffmpeg.avutil.AVClass;
/**
 * An instance of a filter<br>
 * <i>native declaration : libavfilter/avfilter.h:512</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter") 
public abstract class AVFilterContext extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * < needed for av_log() and filters common options<br>
	 * C type : const AVClass*
	 */
	@Field(0) 
	public Pointer<AVClass > av_class() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * < needed for av_log() and filters common options<br>
	 * C type : const AVClass*
	 */
	@Field(0) 
	public AVFilterContext av_class(Pointer<AVClass > av_class) {
		this.io.setPointerField(this, 0, av_class);
		return this;
	}
	/**
	 * < the AVFilter of which this is an instance<br>
	 * C type : const AVFilter*
	 */
	@Field(1) 
	public Pointer<AVFilter > filter() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * < the AVFilter of which this is an instance<br>
	 * C type : const AVFilter*
	 */
	@Field(1) 
	public AVFilterContext filter(Pointer<AVFilter > filter) {
		this.io.setPointerField(this, 1, filter);
		return this;
	}
	/**
	 * < name of this filter instance<br>
	 * C type : char*
	 */
	@Field(2) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * < name of this filter instance<br>
	 * C type : char*
	 */
	@Field(2) 
	public AVFilterContext name(Pointer<Byte > name) {
		this.io.setPointerField(this, 2, name);
		return this;
	}
	/**
	 * < array of input pads<br>
	 * C type : AVFilterPad*
	 */
	@Field(3) 
	public Pointer<AVFilterPad > input_pads() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * < array of input pads<br>
	 * C type : AVFilterPad*
	 */
	@Field(3) 
	public AVFilterContext input_pads(Pointer<AVFilterPad > input_pads) {
		this.io.setPointerField(this, 3, input_pads);
		return this;
	}
	/**
	 * < array of pointers to input links<br>
	 * C type : AVFilterLink**
	 */
	@Field(4) 
	public Pointer<Pointer<AVFilterLink > > inputs() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * < array of pointers to input links<br>
	 * C type : AVFilterLink**
	 */
	@Field(4) 
	public AVFilterContext inputs(Pointer<Pointer<AVFilterLink > > inputs) {
		this.io.setPointerField(this, 4, inputs);
		return this;
	}
	/** < @deprecated use nb_inputs */
	@Field(5) 
	public int input_count() {
		return this.io.getIntField(this, 5);
	}
	/** < @deprecated use nb_inputs */
	@Field(5) 
	public AVFilterContext input_count(int input_count) {
		this.io.setIntField(this, 5, input_count);
		return this;
	}
	/** < number of input pads */
	@Field(6) 
	public int nb_inputs() {
		return this.io.getIntField(this, 6);
	}
	/** < number of input pads */
	@Field(6) 
	public AVFilterContext nb_inputs(int nb_inputs) {
		this.io.setIntField(this, 6, nb_inputs);
		return this;
	}
	/**
	 * < array of output pads<br>
	 * C type : AVFilterPad*
	 */
	@Field(7) 
	public Pointer<AVFilterPad > output_pads() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * < array of output pads<br>
	 * C type : AVFilterPad*
	 */
	@Field(7) 
	public AVFilterContext output_pads(Pointer<AVFilterPad > output_pads) {
		this.io.setPointerField(this, 7, output_pads);
		return this;
	}
	/**
	 * < array of pointers to output links<br>
	 * C type : AVFilterLink**
	 */
	@Field(8) 
	public Pointer<Pointer<AVFilterLink > > outputs() {
		return this.io.getPointerField(this, 8);
	}
	/**
	 * < array of pointers to output links<br>
	 * C type : AVFilterLink**
	 */
	@Field(8) 
	public AVFilterContext outputs(Pointer<Pointer<AVFilterLink > > outputs) {
		this.io.setPointerField(this, 8, outputs);
		return this;
	}
	/** < @deprecated use nb_outputs */
	@Field(9) 
	public int output_count() {
		return this.io.getIntField(this, 9);
	}
	/** < @deprecated use nb_outputs */
	@Field(9) 
	public AVFilterContext output_count(int output_count) {
		this.io.setIntField(this, 9, output_count);
		return this;
	}
	/** < number of output pads */
	@Field(10) 
	public int nb_outputs() {
		return this.io.getIntField(this, 10);
	}
	/** < number of output pads */
	@Field(10) 
	public AVFilterContext nb_outputs(int nb_outputs) {
		this.io.setIntField(this, 10, nb_outputs);
		return this;
	}
	/**
	 * < private data for use by the filter<br>
	 * C type : void*
	 */
	@Field(11) 
	public Pointer<? > priv() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * < private data for use by the filter<br>
	 * C type : void*
	 */
	@Field(11) 
	public AVFilterContext priv(Pointer<? > priv) {
		this.io.setPointerField(this, 11, priv);
		return this;
	}
	/**
	 * < filtergraph this filter belongs to<br>
	 * C type : AVFilterGraph*
	 */
	@Field(12) 
	public Pointer<AVFilterGraph > graph() {
		return this.io.getPointerField(this, 12);
	}
	/**
	 * < filtergraph this filter belongs to<br>
	 * C type : AVFilterGraph*
	 */
	@Field(12) 
	public AVFilterContext graph(Pointer<AVFilterGraph > graph) {
		this.io.setPointerField(this, 12, graph);
		return this;
	}
	/**
	 * Type of multithreading being allowed/used. A combination of<br>
	 * AVFILTER_THREAD_* flags.<br>
	 * * May be set by the caller before initializing the filter to forbid some<br>
	 * or all kinds of multithreading for this filter. The default is allowing<br>
	 * everything.<br>
	 * * When the filter is initialized, this field is combined using bit AND with<br>
	 * AVFilterGraph.thread_type to get the final mask used for determining<br>
	 * allowed threading types. I.e. a threading type needs to be set in both<br>
	 * to be allowed.<br>
	 * * After the filter is initialized, libavfilter sets this field to the<br>
	 * threading type that is actually used (0 for no multithreading).
	 */
	@Field(13) 
	public int thread_type() {
		return this.io.getIntField(this, 13);
	}
	/**
	 * Type of multithreading being allowed/used. A combination of<br>
	 * AVFILTER_THREAD_* flags.<br>
	 * * May be set by the caller before initializing the filter to forbid some<br>
	 * or all kinds of multithreading for this filter. The default is allowing<br>
	 * everything.<br>
	 * * When the filter is initialized, this field is combined using bit AND with<br>
	 * AVFilterGraph.thread_type to get the final mask used for determining<br>
	 * allowed threading types. I.e. a threading type needs to be set in both<br>
	 * to be allowed.<br>
	 * * After the filter is initialized, libavfilter sets this field to the<br>
	 * threading type that is actually used (0 for no multithreading).
	 */
	@Field(13) 
	public AVFilterContext thread_type(int thread_type) {
		this.io.setIntField(this, 13, thread_type);
		return this;
	}
	/** Conversion Error : AVFilterInternal* (failed to convert type to Java (undefined type)) */
	/** Conversion Error : AVFilterCommand* (failed to convert type to Java (undefined type)) */
	/**
	 * < enable expression string<br>
	 * C type : char*
	 */
	@Field(16) 
	public Pointer<Byte > enable_str() {
		return this.io.getPointerField(this, 16);
	}
	/**
	 * < enable expression string<br>
	 * C type : char*
	 */
	@Field(16) 
	public AVFilterContext enable_str(Pointer<Byte > enable_str) {
		this.io.setPointerField(this, 16, enable_str);
		return this;
	}
	/**
	 * < parsed expression (AVExpr*)<br>
	 * C type : void*
	 */
	@Field(17) 
	public Pointer<? > enable() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * < parsed expression (AVExpr*)<br>
	 * C type : void*
	 */
	@Field(17) 
	public AVFilterContext enable(Pointer<? > enable) {
		this.io.setPointerField(this, 17, enable);
		return this;
	}
	/**
	 * < variable values for the enable expression<br>
	 * C type : double*
	 */
	@Field(18) 
	public Pointer<Double > var_values() {
		return this.io.getPointerField(this, 18);
	}
	/**
	 * < variable values for the enable expression<br>
	 * C type : double*
	 */
	@Field(18) 
	public AVFilterContext var_values(Pointer<Double > var_values) {
		this.io.setPointerField(this, 18, var_values);
		return this;
	}
	/** < the enabled state from the last expression evaluation */
	@Field(19) 
	public int is_disabled() {
		return this.io.getIntField(this, 19);
	}
	/** < the enabled state from the last expression evaluation */
	@Field(19) 
	public AVFilterContext is_disabled(int is_disabled) {
		this.io.setIntField(this, 19, is_disabled);
		return this;
	}
}
