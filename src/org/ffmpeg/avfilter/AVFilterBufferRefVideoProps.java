package org.ffmpeg.avfilter;
import org.bridj.BridJ;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.ffmpeg.avutil.AVRational;
import org.ffmpeg.avutil.AvutilLibrary.AVPictureType;
/**
 * <i>native declaration : libavfilter/avfilter.h:103</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter") 
public class AVFilterBufferRefVideoProps extends StructObject {
	static {
		BridJ.register();
	}
	/** < image width */
	@Field(0) 
	public int w() {
		return this.io.getIntField(this, 0);
	}
	/** < image width */
	@Field(0) 
	public AVFilterBufferRefVideoProps w(int w) {
		this.io.setIntField(this, 0, w);
		return this;
	}
	/** < image height */
	@Field(1) 
	public int h() {
		return this.io.getIntField(this, 1);
	}
	/** < image height */
	@Field(1) 
	public AVFilterBufferRefVideoProps h(int h) {
		this.io.setIntField(this, 1, h);
		return this;
	}
	/**
	 * < sample aspect ratio<br>
	 * C type : AVRational
	 */
	@Field(2) 
	public AVRational sample_aspect_ratio() {
		return this.io.getNativeObjectField(this, 2);
	}
	/**
	 * < sample aspect ratio<br>
	 * C type : AVRational
	 */
	@Field(2) 
	public AVFilterBufferRefVideoProps sample_aspect_ratio(AVRational sample_aspect_ratio) {
		this.io.setNativeObjectField(this, 2, sample_aspect_ratio);
		return this;
	}
	/** < is frame interlaced */
	@Field(3) 
	public int interlaced() {
		return this.io.getIntField(this, 3);
	}
	/** < is frame interlaced */
	@Field(3) 
	public AVFilterBufferRefVideoProps interlaced(int interlaced) {
		this.io.setIntField(this, 3, interlaced);
		return this;
	}
	/** < field order */
	@Field(4) 
	public int top_field_first() {
		return this.io.getIntField(this, 4);
	}
	/** < field order */
	@Field(4) 
	public AVFilterBufferRefVideoProps top_field_first(int top_field_first) {
		this.io.setIntField(this, 4, top_field_first);
		return this;
	}
	/**
	 * < picture type of the frame<br>
	 * C type : AVPictureType
	 */
	@Field(5) 
	public IntValuedEnum<AVPictureType > pict_type() {
		return this.io.getEnumField(this, 5);
	}
	/**
	 * < picture type of the frame<br>
	 * C type : AVPictureType
	 */
	@Field(5) 
	public AVFilterBufferRefVideoProps pict_type(IntValuedEnum<AVPictureType > pict_type) {
		this.io.setEnumField(this, 5, pict_type);
		return this;
	}
	/** < 1 -> keyframe, 0-> not */
	@Field(6) 
	public int key_frame() {
		return this.io.getIntField(this, 6);
	}
	/** < 1 -> keyframe, 0-> not */
	@Field(6) 
	public AVFilterBufferRefVideoProps key_frame(int key_frame) {
		this.io.setIntField(this, 6, key_frame);
		return this;
	}
	/** < qp_table stride */
	@Field(7) 
	public int qp_table_linesize() {
		return this.io.getIntField(this, 7);
	}
	/** < qp_table stride */
	@Field(7) 
	public AVFilterBufferRefVideoProps qp_table_linesize(int qp_table_linesize) {
		this.io.setIntField(this, 7, qp_table_linesize);
		return this;
	}
	/** < qp_table size */
	@Field(8) 
	public int qp_table_size() {
		return this.io.getIntField(this, 8);
	}
	/** < qp_table size */
	@Field(8) 
	public AVFilterBufferRefVideoProps qp_table_size(int qp_table_size) {
		this.io.setIntField(this, 8, qp_table_size);
		return this;
	}
	/**
	 * < array of Quantization Parameters<br>
	 * C type : int8_t*
	 */
	@Field(9) 
	public Pointer<Byte > qp_table() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * < array of Quantization Parameters<br>
	 * C type : int8_t*
	 */
	@Field(9) 
	public AVFilterBufferRefVideoProps qp_table(Pointer<Byte > qp_table) {
		this.io.setPointerField(this, 9, qp_table);
		return this;
	}
	public AVFilterBufferRefVideoProps() {
		super();
	}
	public AVFilterBufferRefVideoProps(Pointer pointer) {
		super(pointer);
	}
}
