package org.ffmpeg.avfilter;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
/**
 * <i>native declaration : libavfilter/avfilter.h:59</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter") 
public class AVFilterBuffer extends StructObject {
	static {
		BridJ.register();
	}
	/**
	 * < buffer data for each plane/channel<br>
	 * C type : uint8_t*[8]
	 */
	@Array({8}) 
	@Field(0) 
	public Pointer<Pointer<Byte > > data() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * pointers to the data planes/channels.<br>
	 * * For video, this should simply point to data[].<br>
	 * * For planar audio, each channel has a separate data pointer, and<br>
	 * linesize[0] contains the size of each channel buffer.<br>
	 * For packed audio, there is just one data pointer, and linesize[0]<br>
	 * contains the total size of the buffer for all channels.<br>
	 * * Note: Both data and extended_data will always be set, but for planar<br>
	 * audio with more channels that can fit in data, extended_data must be used<br>
	 * in order to access all channels.<br>
	 * C type : uint8_t**
	 */
	@Field(1) 
	public Pointer<Pointer<Byte > > extended_data() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * pointers to the data planes/channels.<br>
	 * * For video, this should simply point to data[].<br>
	 * * For planar audio, each channel has a separate data pointer, and<br>
	 * linesize[0] contains the size of each channel buffer.<br>
	 * For packed audio, there is just one data pointer, and linesize[0]<br>
	 * contains the total size of the buffer for all channels.<br>
	 * * Note: Both data and extended_data will always be set, but for planar<br>
	 * audio with more channels that can fit in data, extended_data must be used<br>
	 * in order to access all channels.<br>
	 * C type : uint8_t**
	 */
	@Field(1) 
	public AVFilterBuffer extended_data(Pointer<Pointer<Byte > > extended_data) {
		this.io.setPointerField(this, 1, extended_data);
		return this;
	}
	/**
	 * < number of bytes per line<br>
	 * C type : int[8]
	 */
	@Array({8}) 
	@Field(2) 
	public Pointer<Integer > linesize() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * private data to be used by a custom free function<br>
	 * C type : void*
	 */
	@Field(3) 
	public Pointer<? > priv() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * private data to be used by a custom free function<br>
	 * C type : void*
	 */
	@Field(3) 
	public AVFilterBuffer priv(Pointer<? > priv) {
		this.io.setPointerField(this, 3, priv);
		return this;
	}
	/**
	 * A pointer to the function to deallocate this buffer if the default<br>
	 * function is not sufficient. This could, for example, add the memory<br>
	 * back into a memory pool to be reused later without the overhead of<br>
	 * reallocating it from scratch.<br>
	 * C type : free_callback*
	 */
	@Field(4) 
	public Pointer<AVFilterBuffer.free_callback > free() {
		return this.io.getPointerField(this, 4);
	}
	/**
	 * A pointer to the function to deallocate this buffer if the default<br>
	 * function is not sufficient. This could, for example, add the memory<br>
	 * back into a memory pool to be reused later without the overhead of<br>
	 * reallocating it from scratch.<br>
	 * C type : free_callback*
	 */
	@Field(4) 
	public AVFilterBuffer free(Pointer<AVFilterBuffer.free_callback > free) {
		this.io.setPointerField(this, 4, free);
		return this;
	}
	/** < media format */
	@Field(5) 
	public int format() {
		return this.io.getIntField(this, 5);
	}
	/** < media format */
	@Field(5) 
	public AVFilterBuffer format(int format) {
		this.io.setIntField(this, 5, format);
		return this;
	}
	/** < width and height of the allocated buffer */
	@Field(6) 
	public int w() {
		return this.io.getIntField(this, 6);
	}
	/** < width and height of the allocated buffer */
	@Field(6) 
	public AVFilterBuffer w(int w) {
		this.io.setIntField(this, 6, w);
		return this;
	}
	/** < width and height of the allocated buffer */
	@Field(7) 
	public int h() {
		return this.io.getIntField(this, 7);
	}
	/** < width and height of the allocated buffer */
	@Field(7) 
	public AVFilterBuffer h(int h) {
		this.io.setIntField(this, 7, h);
		return this;
	}
	/** < number of references to this buffer */
	@Field(8) 
	public int refcount() {
		return this.io.getIntField(this, 8);
	}
	/** < number of references to this buffer */
	@Field(8) 
	public AVFilterBuffer refcount(int refcount) {
		this.io.setIntField(this, 8, refcount);
		return this;
	}
	/** <i>native declaration : libavfilter/avfilter.h:58</i> */
	public static abstract class free_callback extends Callback<free_callback > {
		public void apply(Pointer<AVFilterBuffer > buf) {
			apply(Pointer.getPeer(buf));
		}
		public void apply(@Ptr long buf) {
			apply(Pointer.pointerToAddress(buf, AVFilterBuffer.class));
		}
	};
	public AVFilterBuffer() {
		super();
	}
	public AVFilterBuffer(Pointer pointer) {
		super(pointer);
	}
}
