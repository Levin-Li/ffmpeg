package org.ffmpeg.avutil;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.util.Arrays;
import java.util.List;
import org.ffmpeg.avutil.AvutilLibrary.AVBufferRef;
import org.ffmpeg.avutil.AvutilLibrary.AVPanScan;
/**
 * <i>native declaration : libavutil/frame.h:109</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVFrame extends Structure {
	/** C type : uint8_t*[8] */
	public Pointer[] data = new Pointer[8];
	/** C type : int[8] */
	public int[] linesize = new int[8];
	/** C type : uint8_t** */
	public PointerByReference extended_data;
	public int width;
	public int height;
	public int nb_samples;
	public int format;
	public int key_frame;
	/**
	 * @see AVPictureType<br>
	 * C type : AVPictureType
	 */
	public int pict_type;
	/** C type : uint8_t*[8] */
	public Pointer[] base = new Pointer[8];
	/** C type : AVRational */
	public AVRational sample_aspect_ratio;
	public long pts;
	public long pkt_pts;
	public long pkt_dts;
	public int coded_picture_number;
	public int display_picture_number;
	public int quality;
	public int reference;
	/** C type : int8_t* */
	public Pointer qscale_table;
	public int qstride;
	public int qscale_type;
	/** C type : uint8_t* */
	public Pointer mbskip_table;
	/** C type : int16_t[2]*[2] */
	public Pointer[] motion_val = new Pointer[2];
	/** C type : uint32_t* */
	public IntByReference mb_type;
	/** C type : short* */
	public ShortByReference dct_coeff;
	/** C type : int8_t*[2] */
	public Pointer[] ref_index = new Pointer[2];
	/** C type : void* */
	public Pointer opaque;
	/** C type : uint64_t[8] */
	public long[] error = new long[8];
	public int type;
	public int repeat_pict;
	public int interlaced_frame;
	public int top_field_first;
	public int palette_has_changed;
	public int buffer_hints;
	/** C type : AVPanScan* */
	public AVPanScan pan_scan;
	public long reordered_opaque;
	/** C type : void* */
	public Pointer hwaccel_picture_private;
	/** C type : AVCodecContext* */
	public org.ffmpeg.avcodec.AVCodecContext.ByReference owner;
	/** C type : void* */
	public Pointer thread_opaque;
	public byte motion_subsample_log2;
	public int sample_rate;
	public long channel_layout;
	/** C type : AVBufferRef*[8] */
	public AVBufferRef[] buf = new AVBufferRef[8];
	/** C type : AVBufferRef** */
	public AVBufferRef[] extended_buf;
	public int nb_extended_buf;
	/** C type : AVFrameSideData** */
	public org.ffmpeg.avutil.AVFrameSideData.ByReference[] side_data;
	public int nb_side_data;
	public int flags;
	public long best_effort_timestamp;
	public long pkt_pos;
	public long pkt_duration;
	/** C type : AVDictionary* */
	public org.ffmpeg.avutil.AVDictionary.ByReference metadata;
	public int decode_error_flags;
	public int channels;
	public int pkt_size;
	/**
	 * @see AVColorSpace<br>
	 * C type : AVColorSpace
	 */
	public int colorspace;
	/**
	 * @see AVColorRange<br>
	 * C type : AVColorRange
	 */
	public int color_range;
	/** C type : AVBufferRef* */
	public AVBufferRef qp_table_buf;
	public AVFrame() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("data", "linesize", "extended_data", "width", "height", "nb_samples", "format", "key_frame", "pict_type", "base", "sample_aspect_ratio", "pts", "pkt_pts", "pkt_dts", "coded_picture_number", "display_picture_number", "quality", "reference", "qscale_table", "qstride", "qscale_type", "mbskip_table", "motion_val", "mb_type", "dct_coeff", "ref_index", "opaque", "error", "type", "repeat_pict", "interlaced_frame", "top_field_first", "palette_has_changed", "buffer_hints", "pan_scan", "reordered_opaque", "hwaccel_picture_private", "owner", "thread_opaque", "motion_subsample_log2", "sample_rate", "channel_layout", "buf", "extended_buf", "nb_extended_buf", "side_data", "nb_side_data", "flags", "best_effort_timestamp", "pkt_pos", "pkt_duration", "metadata", "decode_error_flags", "channels", "pkt_size", "colorspace", "color_range", "qp_table_buf");
	}
	public AVFrame(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVFrame implements Structure.ByReference {
		
	};
	public static class ByValue extends AVFrame implements Structure.ByValue {
		
	};
}
