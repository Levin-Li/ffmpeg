package org.ffmpeg.avutil;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Bits;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : libavutil/pixdesc.h:20</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avutil") 
public class AVComponentDescriptor extends StructObject {
	static {
		BridJ.register();
	}
	/** Which of the 4 planes contains the component. */
	@Field(0) 
	@Bits(2) 
	public short plane() {
		return this.io.getShortField(this, 0);
	}
	/** Which of the 4 planes contains the component. */
	@Field(0) 
	@Bits(2) 
	public AVComponentDescriptor plane(short plane) {
		this.io.setShortField(this, 0, plane);
		return this;
	}
	/**
	 * Number of elements between 2 horizontally consecutive pixels minus 1.<br>
	 * Elements are bits for bitstream formats, bytes otherwise.
	 */
	@Field(1) 
	@Bits(3) 
	public short step_minus1() {
		return this.io.getShortField(this, 1);
	}
	/**
	 * Number of elements between 2 horizontally consecutive pixels minus 1.<br>
	 * Elements are bits for bitstream formats, bytes otherwise.
	 */
	@Field(1) 
	@Bits(3) 
	public AVComponentDescriptor step_minus1(short step_minus1) {
		this.io.setShortField(this, 1, step_minus1);
		return this;
	}
	/**
	 * Number of elements before the component of the first pixel plus 1.<br>
	 * Elements are bits for bitstream formats, bytes otherwise.
	 */
	@Field(2) 
	@Bits(3) 
	public short offset_plus1() {
		return this.io.getShortField(this, 2);
	}
	/**
	 * Number of elements before the component of the first pixel plus 1.<br>
	 * Elements are bits for bitstream formats, bytes otherwise.
	 */
	@Field(2) 
	@Bits(3) 
	public AVComponentDescriptor offset_plus1(short offset_plus1) {
		this.io.setShortField(this, 2, offset_plus1);
		return this;
	}
	/**
	 * Number of least significant bits that must be shifted away<br>
	 * to get the value.
	 */
	@Field(3) 
	@Bits(3) 
	public short shift() {
		return this.io.getShortField(this, 3);
	}
	/**
	 * Number of least significant bits that must be shifted away<br>
	 * to get the value.
	 */
	@Field(3) 
	@Bits(3) 
	public AVComponentDescriptor shift(short shift) {
		this.io.setShortField(this, 3, shift);
		return this;
	}
	/** Number of bits in the component minus 1. */
	@Field(4) 
	@Bits(4) 
	public short depth_minus1() {
		return this.io.getShortField(this, 4);
	}
	/** Number of bits in the component minus 1. */
	@Field(4) 
	@Bits(4) 
	public AVComponentDescriptor depth_minus1(short depth_minus1) {
		this.io.setShortField(this, 4, depth_minus1);
		return this;
	}
	public AVComponentDescriptor() {
		super();
	}
	public AVComponentDescriptor(Pointer pointer) {
		super(pointer);
	}
}
