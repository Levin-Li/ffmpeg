package org.ffmpeg.avcodec;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
import org.ffmpeg.avcodec.AvcodecLibrary.AVSubtitle;
import org.ffmpeg.avutil.AVFrame;
/**
 * <i>native declaration : ./libavcodec/avcodec.h:453</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVCodec extends Structure {
	/** C type : const char* */
	public Pointer name;
	/** C type : const char* */
	public Pointer long_name;
	/**
	 * @see org.ffmpeg.avutil.AvutilLibrary#AVMediaType<br>
	 * C type : AVMediaType
	 */
	public int type;
	/**
	 * @see AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int id;
	public int capabilities;
	/**
	 * < array of supported framerates, or NULL if any, array is terminated by {0,0}<br>
	 * C type : const AVRational*
	 */
	public org.ffmpeg.avutil.AVRational.ByReference supported_framerates;
	/**
	 * < array of supported pixel formats, or NULL if unknown, array is terminated by -1<br>
	 * C type : AVPixelFormat*
	 */
	public IntByReference pix_fmts;
	/**
	 * < array of supported audio samplerates, or NULL if unknown, array is terminated by 0<br>
	 * C type : const int*
	 */
	public IntByReference supported_samplerates;
	/**
	 * < array of supported sample formats, or NULL if unknown, array is terminated by -1<br>
	 * C type : AVSampleFormat*
	 */
	public IntByReference sample_fmts;
	/**
	 * < array of support channel layouts, or NULL if unknown. array is terminated by 0<br>
	 * C type : const uint64_t*
	 */
	public LongByReference channel_layouts;
	/** < maximum value for lowres supported by the decoder, no direct access, use av_codec_get_max_lowres() */
	public byte max_lowres;
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	public org.ffmpeg.avutil.AVClass.ByReference priv_class;
	/**
	 * < array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}<br>
	 * C type : const AVProfile*
	 */
	public org.ffmpeg.avcodec.AVProfile.ByReference profiles;
	public int priv_data_size;
	/** C type : AVCodec* */
	public AVCodec.ByReference next;
	/** C type : init_thread_copy_callback* */
	public AVCodec.init_thread_copy_callback init_thread_copy;
	/** C type : update_thread_context_callback* */
	public AVCodec.update_thread_context_callback update_thread_context;
	/** C type : const AVCodecDefault* */
	public PointerByReference defaults;
	/** C type : init_static_data_callback* */
	public AVCodec.init_static_data_callback init_static_data;
	/** C type : init_callback* */
	public AVCodec.init_callback init;
	/** C type : encode_sub_callback* */
	public AVCodec.encode_sub_callback encode_sub;
	/** C type : encode2_callback* */
	public AVCodec.encode2_callback encode2;
	/** C type : decode_callback* */
	public AVCodec.decode_callback decode;
	/** C type : close_callback* */
	public AVCodec.close_callback close;
	/** C type : flush_callback* */
	public AVCodec.flush_callback flush;
	/** <i>native declaration : ./libavcodec/avcodec.h:444</i> */
	public interface init_thread_copy_callback extends Callback {
		int apply(AVCodecContext AVCodecContextPtr1);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:445</i> */
	public interface update_thread_context_callback extends Callback {
		int apply(AVCodecContext dst, AVCodecContext src);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:446</i> */
	public interface init_static_data_callback extends Callback {
		void apply(AVCodec codec);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:447</i> */
	public interface init_callback extends Callback {
		int apply(AVCodecContext AVCodecContextPtr1);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:448</i> */
	public interface encode_sub_callback extends Callback {
		int apply(AVCodecContext AVCodecContextPtr1, Pointer buf, int buf_size, AVSubtitle sub);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:449</i> */
	public interface encode2_callback extends Callback {
		int apply(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, IntByReference got_packet_ptr);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:450</i> */
	public interface decode_callback extends Callback {
		int apply(AVCodecContext AVCodecContextPtr1, Pointer outdata, IntByReference outdata_size, AVPacket avpkt);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:451</i> */
	public interface close_callback extends Callback {
		int apply(AVCodecContext AVCodecContextPtr1);
	};
	/** <i>native declaration : ./libavcodec/avcodec.h:452</i> */
	public interface flush_callback extends Callback {
		void apply(AVCodecContext AVCodecContextPtr1);
	};
	public AVCodec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("name", "long_name", "type", "id", "capabilities", "supported_framerates", "pix_fmts", "supported_samplerates", "sample_fmts", "channel_layouts", "max_lowres", "priv_class", "profiles", "priv_data_size", "next", "init_thread_copy", "update_thread_context", "defaults", "init_static_data", "init", "encode_sub", "encode2", "decode", "close", "flush");
	}
	public AVCodec(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVCodec implements Structure.ByReference {
		
	};
	public static class ByValue extends AVCodec implements Structure.ByValue {
		
	};
}
