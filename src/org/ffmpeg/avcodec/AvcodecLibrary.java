package org.ffmpeg.avcodec;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Array;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
import org.ffmpeg.avutil.AVClass;
import org.ffmpeg.avutil.AVDictionary;
import org.ffmpeg.avutil.AVFrame;
import org.ffmpeg.avutil.AVRational;
import org.ffmpeg.avutil.AvutilLibrary.AVColorRange;
import org.ffmpeg.avutil.AvutilLibrary.AVColorSpace;
import org.ffmpeg.avutil.AvutilLibrary.AVMediaType;
import org.ffmpeg.avutil.AvutilLibrary.AVPixelFormat;
import org.ffmpeg.avutil.AvutilLibrary.AVSampleFormat;
/**
 * Wrapper for library <b>avcodec</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
@Runtime(CRuntime.class) 
public class AvcodecLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:768</i>
	 */
	public enum AVCodecID implements IntValuedEnum<AVCodecID > {
		AV_CODEC_ID_NONE(0),
		/** video codecs */
		AV_CODEC_ID_MPEG1VIDEO(1),
		/** < preferred ID for MPEG-1/2 video decoding */
		AV_CODEC_ID_MPEG2VIDEO(2),
		AV_CODEC_ID_MPEG2VIDEO_XVMC(3),
		AV_CODEC_ID_H261(4),
		AV_CODEC_ID_H263(5),
		AV_CODEC_ID_RV10(6),
		AV_CODEC_ID_RV20(7),
		AV_CODEC_ID_MJPEG(8),
		AV_CODEC_ID_MJPEGB(9),
		AV_CODEC_ID_LJPEG(10),
		AV_CODEC_ID_SP5X(11),
		AV_CODEC_ID_JPEGLS(12),
		AV_CODEC_ID_MPEG4(13),
		AV_CODEC_ID_RAWVIDEO(14),
		AV_CODEC_ID_MSMPEG4V1(15),
		AV_CODEC_ID_MSMPEG4V2(16),
		AV_CODEC_ID_MSMPEG4V3(17),
		AV_CODEC_ID_WMV1(18),
		AV_CODEC_ID_WMV2(19),
		AV_CODEC_ID_H263P(20),
		AV_CODEC_ID_H263I(21),
		AV_CODEC_ID_FLV1(22),
		AV_CODEC_ID_SVQ1(23),
		AV_CODEC_ID_SVQ3(24),
		AV_CODEC_ID_DVVIDEO(25),
		AV_CODEC_ID_HUFFYUV(26),
		AV_CODEC_ID_CYUV(27),
		AV_CODEC_ID_H264(28),
		AV_CODEC_ID_INDEO3(29),
		AV_CODEC_ID_VP3(30),
		AV_CODEC_ID_THEORA(31),
		AV_CODEC_ID_ASV1(32),
		AV_CODEC_ID_ASV2(33),
		AV_CODEC_ID_FFV1(34),
		AV_CODEC_ID_4XM(35),
		AV_CODEC_ID_VCR1(36),
		AV_CODEC_ID_CLJR(37),
		AV_CODEC_ID_MDEC(38),
		AV_CODEC_ID_ROQ(39),
		AV_CODEC_ID_INTERPLAY_VIDEO(40),
		AV_CODEC_ID_XAN_WC3(41),
		AV_CODEC_ID_XAN_WC4(42),
		AV_CODEC_ID_RPZA(43),
		AV_CODEC_ID_CINEPAK(44),
		AV_CODEC_ID_WS_VQA(45),
		AV_CODEC_ID_MSRLE(46),
		AV_CODEC_ID_MSVIDEO1(47),
		AV_CODEC_ID_IDCIN(48),
		AV_CODEC_ID_8BPS(49),
		AV_CODEC_ID_SMC(50),
		AV_CODEC_ID_FLIC(51),
		AV_CODEC_ID_TRUEMOTION1(52),
		AV_CODEC_ID_VMDVIDEO(53),
		AV_CODEC_ID_MSZH(54),
		AV_CODEC_ID_ZLIB(55),
		AV_CODEC_ID_QTRLE(56),
		AV_CODEC_ID_TSCC(57),
		AV_CODEC_ID_ULTI(58),
		AV_CODEC_ID_QDRAW(59),
		AV_CODEC_ID_VIXL(60),
		AV_CODEC_ID_QPEG(61),
		AV_CODEC_ID_PNG(62),
		AV_CODEC_ID_PPM(63),
		AV_CODEC_ID_PBM(64),
		AV_CODEC_ID_PGM(65),
		AV_CODEC_ID_PGMYUV(66),
		AV_CODEC_ID_PAM(67),
		AV_CODEC_ID_FFVHUFF(68),
		AV_CODEC_ID_RV30(69),
		AV_CODEC_ID_RV40(70),
		AV_CODEC_ID_VC1(71),
		AV_CODEC_ID_WMV3(72),
		AV_CODEC_ID_LOCO(73),
		AV_CODEC_ID_WNV1(74),
		AV_CODEC_ID_AASC(75),
		AV_CODEC_ID_INDEO2(76),
		AV_CODEC_ID_FRAPS(77),
		AV_CODEC_ID_TRUEMOTION2(78),
		AV_CODEC_ID_BMP(79),
		AV_CODEC_ID_CSCD(80),
		AV_CODEC_ID_MMVIDEO(81),
		AV_CODEC_ID_ZMBV(82),
		AV_CODEC_ID_AVS(83),
		AV_CODEC_ID_SMACKVIDEO(84),
		AV_CODEC_ID_NUV(85),
		AV_CODEC_ID_KMVC(86),
		AV_CODEC_ID_FLASHSV(87),
		AV_CODEC_ID_CAVS(88),
		AV_CODEC_ID_JPEG2000(89),
		AV_CODEC_ID_VMNC(90),
		AV_CODEC_ID_VP5(91),
		AV_CODEC_ID_VP6(92),
		AV_CODEC_ID_VP6F(93),
		AV_CODEC_ID_TARGA(94),
		AV_CODEC_ID_DSICINVIDEO(95),
		AV_CODEC_ID_TIERTEXSEQVIDEO(96),
		AV_CODEC_ID_TIFF(97),
		AV_CODEC_ID_GIF(98),
		AV_CODEC_ID_DXA(99),
		AV_CODEC_ID_DNXHD(100),
		AV_CODEC_ID_THP(101),
		AV_CODEC_ID_SGI(102),
		AV_CODEC_ID_C93(103),
		AV_CODEC_ID_BETHSOFTVID(104),
		AV_CODEC_ID_PTX(105),
		AV_CODEC_ID_TXD(106),
		AV_CODEC_ID_VP6A(107),
		AV_CODEC_ID_AMV(108),
		AV_CODEC_ID_VB(109),
		AV_CODEC_ID_PCX(110),
		AV_CODEC_ID_SUNRAST(111),
		AV_CODEC_ID_INDEO4(112),
		AV_CODEC_ID_INDEO5(113),
		AV_CODEC_ID_MIMIC(114),
		AV_CODEC_ID_RL2(115),
		AV_CODEC_ID_ESCAPE124(116),
		AV_CODEC_ID_DIRAC(117),
		AV_CODEC_ID_BFI(118),
		AV_CODEC_ID_CMV(119),
		AV_CODEC_ID_MOTIONPIXELS(120),
		AV_CODEC_ID_TGV(121),
		AV_CODEC_ID_TGQ(122),
		AV_CODEC_ID_TQI(123),
		AV_CODEC_ID_AURA(124),
		AV_CODEC_ID_AURA2(125),
		AV_CODEC_ID_V210X(126),
		AV_CODEC_ID_TMV(127),
		AV_CODEC_ID_V210(128),
		AV_CODEC_ID_DPX(129),
		AV_CODEC_ID_MAD(130),
		AV_CODEC_ID_FRWU(131),
		AV_CODEC_ID_FLASHSV2(132),
		AV_CODEC_ID_CDGRAPHICS(133),
		AV_CODEC_ID_R210(134),
		AV_CODEC_ID_ANM(135),
		AV_CODEC_ID_BINKVIDEO(136),
		AV_CODEC_ID_IFF_ILBM(137),
		AV_CODEC_ID_IFF_BYTERUN1(138),
		AV_CODEC_ID_KGV1(139),
		AV_CODEC_ID_YOP(140),
		AV_CODEC_ID_VP8(141),
		AV_CODEC_ID_PICTOR(142),
		AV_CODEC_ID_ANSI(143),
		AV_CODEC_ID_A64_MULTI(144),
		AV_CODEC_ID_A64_MULTI5(145),
		AV_CODEC_ID_R10K(146),
		AV_CODEC_ID_MXPEG(147),
		AV_CODEC_ID_LAGARITH(148),
		AV_CODEC_ID_PRORES(149),
		AV_CODEC_ID_JV(150),
		AV_CODEC_ID_DFA(151),
		AV_CODEC_ID_WMV3IMAGE(152),
		AV_CODEC_ID_VC1IMAGE(153),
		AV_CODEC_ID_UTVIDEO(154),
		AV_CODEC_ID_BMV_VIDEO(155),
		AV_CODEC_ID_VBLE(156),
		AV_CODEC_ID_DXTORY(157),
		AV_CODEC_ID_V410(158),
		AV_CODEC_ID_XWD(159),
		AV_CODEC_ID_CDXL(160),
		AV_CODEC_ID_XBM(161),
		AV_CODEC_ID_ZEROCODEC(162),
		AV_CODEC_ID_MSS1(163),
		AV_CODEC_ID_MSA1(164),
		AV_CODEC_ID_TSCC2(165),
		AV_CODEC_ID_MTS2(166),
		AV_CODEC_ID_CLLC(167),
		AV_CODEC_ID_MSS2(168),
		AV_CODEC_ID_VP9(169),
		AV_CODEC_ID_AIC(170),
		AV_CODEC_ID_ESCAPE130_DEPRECATED(171),
		AV_CODEC_ID_G2M_DEPRECATED(172),
		AV_CODEC_ID_WEBP_DEPRECATED(173),
		AV_CODEC_ID_BRENDER_PIX((('X') | (('I') << 8) | (('P') << 16) | ('B' << 24))),
		AV_CODEC_ID_Y41P((('P') | (('1') << 8) | (('4') << 16) | ('Y' << 24))),
		AV_CODEC_ID_ESCAPE130((('0') | (('3') << 8) | (('1') << 16) | ('E' << 24))),
		AV_CODEC_ID_EXR((('R') | (('X') << 8) | (('E') << 16) | ('0' << 24))),
		AV_CODEC_ID_AVRP((('P') | (('R') << 8) | (('V') << 16) | ('A' << 24))),
		AV_CODEC_ID_012V((('V') | (('2') << 8) | (('1') << 16) | ('0' << 24))),
		AV_CODEC_ID_G2M((('M') | (('2') << 8) | (('G') << 16) | (0 << 24))),
		AV_CODEC_ID_AVUI((('I') | (('U') << 8) | (('V') << 16) | ('A' << 24))),
		AV_CODEC_ID_AYUV((('V') | (('U') << 8) | (('Y') << 16) | ('A' << 24))),
		AV_CODEC_ID_TARGA_Y216((('6') | (('1') << 8) | (('2') << 16) | ('T' << 24))),
		AV_CODEC_ID_V308((('8') | (('0') << 8) | (('3') << 16) | ('V' << 24))),
		AV_CODEC_ID_V408((('8') | (('0') << 8) | (('4') << 16) | ('V' << 24))),
		AV_CODEC_ID_YUV4((('4') | (('V') << 8) | (('U') << 16) | ('Y' << 24))),
		AV_CODEC_ID_SANM((('M') | (('N') << 8) | (('A') << 16) | ('S' << 24))),
		AV_CODEC_ID_PAF_VIDEO((('V') | (('F') << 8) | (('A') << 16) | ('P' << 24))),
		AV_CODEC_ID_AVRN((('n') | (('R') << 8) | (('V') << 16) | ('A' << 24))),
		AV_CODEC_ID_CPIA((('A') | (('I') << 8) | (('P') << 16) | ('C' << 24))),
		AV_CODEC_ID_XFACE((('C') | (('A') << 8) | (('F') << 16) | ('X' << 24))),
		AV_CODEC_ID_SGIRLE((('R') | (('I') << 8) | (('G') << 16) | ('S' << 24))),
		AV_CODEC_ID_MVC1((('1') | (('C') << 8) | (('V') << 16) | ('M' << 24))),
		AV_CODEC_ID_MVC2((('2') | (('C') << 8) | (('V') << 16) | ('M' << 24))),
		AV_CODEC_ID_SNOW((('W') | (('O') << 8) | (('N') << 16) | ('S' << 24))),
		AV_CODEC_ID_WEBP((('P') | (('B') << 8) | (('E') << 16) | ('W' << 24))),
		AV_CODEC_ID_SMVJPEG((('J') | (('V') << 8) | (('M') << 16) | ('S' << 24))),
		AV_CODEC_ID_HEVC((('5') | (('6') << 8) | (('2') << 16) | ('H' << 24))),
		/**
		 * various PCM "codecs"<br>
		 * < A dummy id pointing at the start of audio codecs
		 */
		AV_CODEC_ID_FIRST_AUDIO(0x10000),
		AV_CODEC_ID_PCM_S16LE(0x10000),
		AV_CODEC_ID_PCM_S16BE((0x10000 + 1)),
		AV_CODEC_ID_PCM_U16LE((0x10000 + 2)),
		AV_CODEC_ID_PCM_U16BE((0x10000 + 3)),
		AV_CODEC_ID_PCM_S8((0x10000 + 4)),
		AV_CODEC_ID_PCM_U8((0x10000 + 5)),
		AV_CODEC_ID_PCM_MULAW((0x10000 + 6)),
		AV_CODEC_ID_PCM_ALAW((0x10000 + 7)),
		AV_CODEC_ID_PCM_S32LE((0x10000 + 8)),
		AV_CODEC_ID_PCM_S32BE((0x10000 + 9)),
		AV_CODEC_ID_PCM_U32LE((0x10000 + 10)),
		AV_CODEC_ID_PCM_U32BE((0x10000 + 11)),
		AV_CODEC_ID_PCM_S24LE((0x10000 + 12)),
		AV_CODEC_ID_PCM_S24BE((0x10000 + 13)),
		AV_CODEC_ID_PCM_U24LE((0x10000 + 14)),
		AV_CODEC_ID_PCM_U24BE((0x10000 + 15)),
		AV_CODEC_ID_PCM_S24DAUD((0x10000 + 16)),
		AV_CODEC_ID_PCM_ZORK((0x10000 + 17)),
		AV_CODEC_ID_PCM_S16LE_PLANAR((0x10000 + 18)),
		AV_CODEC_ID_PCM_DVD((0x10000 + 19)),
		AV_CODEC_ID_PCM_F32BE((0x10000 + 20)),
		AV_CODEC_ID_PCM_F32LE((0x10000 + 21)),
		AV_CODEC_ID_PCM_F64BE((0x10000 + 22)),
		AV_CODEC_ID_PCM_F64LE((0x10000 + 23)),
		AV_CODEC_ID_PCM_BLURAY((0x10000 + 24)),
		AV_CODEC_ID_PCM_LXF((0x10000 + 25)),
		AV_CODEC_ID_S302M((0x10000 + 26)),
		AV_CODEC_ID_PCM_S8_PLANAR((0x10000 + 27)),
		AV_CODEC_ID_PCM_S24LE_PLANAR_DEPRECATED((0x10000 + 28)),
		AV_CODEC_ID_PCM_S32LE_PLANAR_DEPRECATED((0x10000 + 29)),
		AV_CODEC_ID_PCM_S24LE_PLANAR((('P') | (('S') << 8) | (('P') << 16) | (24 << 24))),
		AV_CODEC_ID_PCM_S32LE_PLANAR((('P') | (('S') << 8) | (('P') << 16) | (32 << 24))),
		AV_CODEC_ID_PCM_S16BE_PLANAR(((16) | (('P') << 8) | (('S') << 16) | ('P' << 24))),
		/** various ADPCM codecs */
		AV_CODEC_ID_ADPCM_IMA_QT(0x11000),
		AV_CODEC_ID_ADPCM_IMA_WAV((0x11000 + 1)),
		AV_CODEC_ID_ADPCM_IMA_DK3((0x11000 + 2)),
		AV_CODEC_ID_ADPCM_IMA_DK4((0x11000 + 3)),
		AV_CODEC_ID_ADPCM_IMA_WS((0x11000 + 4)),
		AV_CODEC_ID_ADPCM_IMA_SMJPEG((0x11000 + 5)),
		AV_CODEC_ID_ADPCM_MS((0x11000 + 6)),
		AV_CODEC_ID_ADPCM_4XM((0x11000 + 7)),
		AV_CODEC_ID_ADPCM_XA((0x11000 + 8)),
		AV_CODEC_ID_ADPCM_ADX((0x11000 + 9)),
		AV_CODEC_ID_ADPCM_EA((0x11000 + 10)),
		AV_CODEC_ID_ADPCM_G726((0x11000 + 11)),
		AV_CODEC_ID_ADPCM_CT((0x11000 + 12)),
		AV_CODEC_ID_ADPCM_SWF((0x11000 + 13)),
		AV_CODEC_ID_ADPCM_YAMAHA((0x11000 + 14)),
		AV_CODEC_ID_ADPCM_SBPRO_4((0x11000 + 15)),
		AV_CODEC_ID_ADPCM_SBPRO_3((0x11000 + 16)),
		AV_CODEC_ID_ADPCM_SBPRO_2((0x11000 + 17)),
		AV_CODEC_ID_ADPCM_THP((0x11000 + 18)),
		AV_CODEC_ID_ADPCM_IMA_AMV((0x11000 + 19)),
		AV_CODEC_ID_ADPCM_EA_R1((0x11000 + 20)),
		AV_CODEC_ID_ADPCM_EA_R3((0x11000 + 21)),
		AV_CODEC_ID_ADPCM_EA_R2((0x11000 + 22)),
		AV_CODEC_ID_ADPCM_IMA_EA_SEAD((0x11000 + 23)),
		AV_CODEC_ID_ADPCM_IMA_EA_EACS((0x11000 + 24)),
		AV_CODEC_ID_ADPCM_EA_XAS((0x11000 + 25)),
		AV_CODEC_ID_ADPCM_EA_MAXIS_XA((0x11000 + 26)),
		AV_CODEC_ID_ADPCM_IMA_ISS((0x11000 + 27)),
		AV_CODEC_ID_ADPCM_G722((0x11000 + 28)),
		AV_CODEC_ID_ADPCM_IMA_APC((0x11000 + 29)),
		AV_CODEC_ID_VIMA((('A') | (('M') << 8) | (('I') << 16) | ('V' << 24))),
		AV_CODEC_ID_ADPCM_AFC(((' ') | (('C') << 8) | (('F') << 16) | ('A' << 24))),
		AV_CODEC_ID_ADPCM_IMA_OKI(((' ') | (('I') << 8) | (('K') << 16) | ('O' << 24))),
		AV_CODEC_ID_ADPCM_DTK(((' ') | (('K') << 8) | (('T') << 16) | ('D' << 24))),
		AV_CODEC_ID_ADPCM_IMA_RAD(((' ') | (('D') << 8) | (('A') << 16) | ('R' << 24))),
		AV_CODEC_ID_ADPCM_G726LE((('G') | (('7') << 8) | (('2') << 16) | ('6' << 24))),
		/** AMR */
		AV_CODEC_ID_AMR_NB(0x12000),
		AV_CODEC_ID_AMR_WB((0x12000 + 1)),
		/** RealAudio codecs */
		AV_CODEC_ID_RA_144(0x13000),
		AV_CODEC_ID_RA_288((0x13000 + 1)),
		/** various DPCM codecs */
		AV_CODEC_ID_ROQ_DPCM(0x14000),
		AV_CODEC_ID_INTERPLAY_DPCM((0x14000 + 1)),
		AV_CODEC_ID_XAN_DPCM((0x14000 + 2)),
		AV_CODEC_ID_SOL_DPCM((0x14000 + 3)),
		/** audio codecs */
		AV_CODEC_ID_MP2(0x15000),
		/** < preferred ID for decoding MPEG audio layer 1, 2 or 3 */
		AV_CODEC_ID_MP3((0x15000 + 1)),
		AV_CODEC_ID_AAC((0x15000 + 2)),
		AV_CODEC_ID_AC3((0x15000 + 3)),
		AV_CODEC_ID_DTS((0x15000 + 4)),
		AV_CODEC_ID_VORBIS((0x15000 + 5)),
		AV_CODEC_ID_DVAUDIO((0x15000 + 6)),
		AV_CODEC_ID_WMAV1((0x15000 + 7)),
		AV_CODEC_ID_WMAV2((0x15000 + 8)),
		AV_CODEC_ID_MACE3((0x15000 + 9)),
		AV_CODEC_ID_MACE6((0x15000 + 10)),
		AV_CODEC_ID_VMDAUDIO((0x15000 + 11)),
		AV_CODEC_ID_FLAC((0x15000 + 12)),
		AV_CODEC_ID_MP3ADU((0x15000 + 13)),
		AV_CODEC_ID_MP3ON4((0x15000 + 14)),
		AV_CODEC_ID_SHORTEN((0x15000 + 15)),
		AV_CODEC_ID_ALAC((0x15000 + 16)),
		AV_CODEC_ID_WESTWOOD_SND1((0x15000 + 17)),
		/** < as in Berlin toast format */
		AV_CODEC_ID_GSM((0x15000 + 18)),
		AV_CODEC_ID_QDM2((0x15000 + 19)),
		AV_CODEC_ID_COOK((0x15000 + 20)),
		AV_CODEC_ID_TRUESPEECH((0x15000 + 21)),
		AV_CODEC_ID_TTA((0x15000 + 22)),
		AV_CODEC_ID_SMACKAUDIO((0x15000 + 23)),
		AV_CODEC_ID_QCELP((0x15000 + 24)),
		AV_CODEC_ID_WAVPACK((0x15000 + 25)),
		AV_CODEC_ID_DSICINAUDIO((0x15000 + 26)),
		AV_CODEC_ID_IMC((0x15000 + 27)),
		AV_CODEC_ID_MUSEPACK7((0x15000 + 28)),
		AV_CODEC_ID_MLP((0x15000 + 29)),
		/** as found in WAV */
		AV_CODEC_ID_GSM_MS((0x15000 + 30)),
		AV_CODEC_ID_ATRAC3((0x15000 + 31)),
		AV_CODEC_ID_VOXWARE((0x15000 + 32)),
		AV_CODEC_ID_APE((0x15000 + 33)),
		AV_CODEC_ID_NELLYMOSER((0x15000 + 34)),
		AV_CODEC_ID_MUSEPACK8((0x15000 + 35)),
		AV_CODEC_ID_SPEEX((0x15000 + 36)),
		AV_CODEC_ID_WMAVOICE((0x15000 + 37)),
		AV_CODEC_ID_WMAPRO((0x15000 + 38)),
		AV_CODEC_ID_WMALOSSLESS((0x15000 + 39)),
		AV_CODEC_ID_ATRAC3P((0x15000 + 40)),
		AV_CODEC_ID_EAC3((0x15000 + 41)),
		AV_CODEC_ID_SIPR((0x15000 + 42)),
		AV_CODEC_ID_MP1((0x15000 + 43)),
		AV_CODEC_ID_TWINVQ((0x15000 + 44)),
		AV_CODEC_ID_TRUEHD((0x15000 + 45)),
		AV_CODEC_ID_MP4ALS((0x15000 + 46)),
		AV_CODEC_ID_ATRAC1((0x15000 + 47)),
		AV_CODEC_ID_BINKAUDIO_RDFT((0x15000 + 48)),
		AV_CODEC_ID_BINKAUDIO_DCT((0x15000 + 49)),
		AV_CODEC_ID_AAC_LATM((0x15000 + 50)),
		AV_CODEC_ID_QDMC((0x15000 + 51)),
		AV_CODEC_ID_CELT((0x15000 + 52)),
		AV_CODEC_ID_G723_1((0x15000 + 53)),
		AV_CODEC_ID_G729((0x15000 + 54)),
		AV_CODEC_ID_8SVX_EXP((0x15000 + 55)),
		AV_CODEC_ID_8SVX_FIB((0x15000 + 56)),
		AV_CODEC_ID_BMV_AUDIO((0x15000 + 57)),
		AV_CODEC_ID_RALF((0x15000 + 58)),
		AV_CODEC_ID_IAC((0x15000 + 59)),
		AV_CODEC_ID_ILBC((0x15000 + 60)),
		AV_CODEC_ID_OPUS_DEPRECATED((0x15000 + 61)),
		AV_CODEC_ID_COMFORT_NOISE((0x15000 + 62)),
		AV_CODEC_ID_TAK_DEPRECATED((0x15000 + 63)),
		AV_CODEC_ID_METASOUND((0x15000 + 64)),
		AV_CODEC_ID_FFWAVESYNTH((('S') | (('W') << 8) | (('F') << 16) | ('F' << 24))),
		AV_CODEC_ID_SONIC((('C') | (('N') << 8) | (('O') << 16) | ('S' << 24))),
		AV_CODEC_ID_SONIC_LS((('L') | (('N') << 8) | (('O') << 16) | ('S' << 24))),
		AV_CODEC_ID_PAF_AUDIO((('A') | (('F') << 8) | (('A') << 16) | ('P' << 24))),
		AV_CODEC_ID_OPUS((('S') | (('U') << 8) | (('P') << 16) | ('O' << 24))),
		AV_CODEC_ID_TAK((('K') | (('a') << 8) | (('B') << 16) | ('t' << 24))),
		AV_CODEC_ID_EVRC((('c') | (('v') << 8) | (('e') << 16) | ('s' << 24))),
		AV_CODEC_ID_SMV((('v') | (('m') << 8) | (('s') << 16) | ('s' << 24))),
		/**
		 * subtitle codecs<br>
		 * < A dummy ID pointing at the start of subtitle codecs.
		 */
		AV_CODEC_ID_FIRST_SUBTITLE(0x17000),
		AV_CODEC_ID_DVD_SUBTITLE(0x17000),
		AV_CODEC_ID_DVB_SUBTITLE((0x17000 + 1)),
		/** < raw UTF-8 text */
		AV_CODEC_ID_TEXT((0x17000 + 2)),
		AV_CODEC_ID_XSUB((0x17000 + 3)),
		AV_CODEC_ID_SSA((0x17000 + 4)),
		AV_CODEC_ID_MOV_TEXT((0x17000 + 5)),
		AV_CODEC_ID_HDMV_PGS_SUBTITLE((0x17000 + 6)),
		AV_CODEC_ID_DVB_TELETEXT((0x17000 + 7)),
		AV_CODEC_ID_SRT((0x17000 + 8)),
		AV_CODEC_ID_MICRODVD((('D') | (('V') << 8) | (('D') << 16) | ('m' << 24))),
		AV_CODEC_ID_EIA_608((('8') | (('0') << 8) | (('6') << 16) | ('c' << 24))),
		AV_CODEC_ID_JACOSUB((('B') | (('U') << 8) | (('S') << 16) | ('J' << 24))),
		AV_CODEC_ID_SAMI((('I') | (('M') << 8) | (('A') << 16) | ('S' << 24))),
		AV_CODEC_ID_REALTEXT((('T') | (('X') << 8) | (('T') << 16) | ('R' << 24))),
		AV_CODEC_ID_SUBVIEWER1((('1') | (('V') << 8) | (('b') << 16) | ('S' << 24))),
		AV_CODEC_ID_SUBVIEWER((('V') | (('b') << 8) | (('u') << 16) | ('S' << 24))),
		AV_CODEC_ID_SUBRIP((('p') | (('i') << 8) | (('R') << 16) | ('S' << 24))),
		AV_CODEC_ID_WEBVTT((('T') | (('T') << 8) | (('V') << 16) | ('W' << 24))),
		AV_CODEC_ID_MPL2((('2') | (('L') << 8) | (('P') << 16) | ('M' << 24))),
		AV_CODEC_ID_VPLAYER((('r') | (('l') << 8) | (('P') << 16) | ('V' << 24))),
		AV_CODEC_ID_PJS((('S') | (('J') << 8) | (('h') << 16) | ('P' << 24))),
		/** < ASS as defined in Matroska */
		AV_CODEC_ID_ASS(((' ') | (('S') << 8) | (('S') << 16) | ('A' << 24))),
		/**
		 * other specific kind of codecs (generally used for attachments)<br>
		 * < A dummy ID pointing at the start of various fake codecs.
		 */
		AV_CODEC_ID_FIRST_UNKNOWN(0x18000),
		AV_CODEC_ID_TTF(0x18000),
		AV_CODEC_ID_BINTEXT((('T') | (('X') << 8) | (('T') << 16) | ('B' << 24))),
		AV_CODEC_ID_XBIN((('N') | (('I') << 8) | (('B') << 16) | ('X' << 24))),
		AV_CODEC_ID_IDF((('F') | (('D') << 8) | (('I') << 16) | (0 << 24))),
		AV_CODEC_ID_OTF((('F') | (('T') << 8) | (('O') << 16) | (0 << 24))),
		AV_CODEC_ID_SMPTE_KLV((('A') | (('V') << 8) | (('L') << 16) | ('K' << 24))),
		AV_CODEC_ID_DVD_NAV((('V') | (('A') << 8) | (('N') << 16) | ('D' << 24))),
		/** < codec_id is not known (like AV_CODEC_ID_NONE) but lavf should attempt to identify it */
		AV_CODEC_ID_PROBE(0x19000),
		/**
		 * < _FAKE_ codec to indicate a raw MPEG-2 TS<br>
		 * stream (only used by libavformat)
		 */
		AV_CODEC_ID_MPEG2TS(0x20000),
		/**
		 * < _FAKE_ codec to indicate a MPEG-4 Systems<br>
		 * stream (only used by libavformat)
		 */
		AV_CODEC_ID_MPEG4SYSTEMS(0x20001),
		/** < Dummy codec for streams containing only metadata information. */
		AV_CODEC_ID_FFMETADATA(0x21000),
		CODEC_ID_NONE(0),
		/** video codecs */
		CODEC_ID_MPEG1VIDEO((0 + 1)),
		/** < preferred ID for MPEG-1/2 video decoding */
		CODEC_ID_MPEG2VIDEO((0 + 2)),
		CODEC_ID_MPEG2VIDEO_XVMC((0 + 3)),
		CODEC_ID_H261((0 + 4)),
		CODEC_ID_H263((0 + 5)),
		CODEC_ID_RV10((0 + 6)),
		CODEC_ID_RV20((0 + 7)),
		CODEC_ID_MJPEG((0 + 8)),
		CODEC_ID_MJPEGB((0 + 9)),
		CODEC_ID_LJPEG((0 + 10)),
		CODEC_ID_SP5X((0 + 11)),
		CODEC_ID_JPEGLS((0 + 12)),
		CODEC_ID_MPEG4((0 + 13)),
		CODEC_ID_RAWVIDEO((0 + 14)),
		CODEC_ID_MSMPEG4V1((0 + 15)),
		CODEC_ID_MSMPEG4V2((0 + 16)),
		CODEC_ID_MSMPEG4V3((0 + 17)),
		CODEC_ID_WMV1((0 + 18)),
		CODEC_ID_WMV2((0 + 19)),
		CODEC_ID_H263P((0 + 20)),
		CODEC_ID_H263I((0 + 21)),
		CODEC_ID_FLV1((0 + 22)),
		CODEC_ID_SVQ1((0 + 23)),
		CODEC_ID_SVQ3((0 + 24)),
		CODEC_ID_DVVIDEO((0 + 25)),
		CODEC_ID_HUFFYUV((0 + 26)),
		CODEC_ID_CYUV((0 + 27)),
		CODEC_ID_H264((0 + 28)),
		CODEC_ID_INDEO3((0 + 29)),
		CODEC_ID_VP3((0 + 30)),
		CODEC_ID_THEORA((0 + 31)),
		CODEC_ID_ASV1((0 + 32)),
		CODEC_ID_ASV2((0 + 33)),
		CODEC_ID_FFV1((0 + 34)),
		CODEC_ID_4XM((0 + 35)),
		CODEC_ID_VCR1((0 + 36)),
		CODEC_ID_CLJR((0 + 37)),
		CODEC_ID_MDEC((0 + 38)),
		CODEC_ID_ROQ((0 + 39)),
		CODEC_ID_INTERPLAY_VIDEO((0 + 40)),
		CODEC_ID_XAN_WC3((0 + 41)),
		CODEC_ID_XAN_WC4((0 + 42)),
		CODEC_ID_RPZA((0 + 43)),
		CODEC_ID_CINEPAK((0 + 44)),
		CODEC_ID_WS_VQA((0 + 45)),
		CODEC_ID_MSRLE((0 + 46)),
		CODEC_ID_MSVIDEO1((0 + 47)),
		CODEC_ID_IDCIN((0 + 48)),
		CODEC_ID_8BPS((0 + 49)),
		CODEC_ID_SMC((0 + 50)),
		CODEC_ID_FLIC((0 + 51)),
		CODEC_ID_TRUEMOTION1((0 + 52)),
		CODEC_ID_VMDVIDEO((0 + 53)),
		CODEC_ID_MSZH((0 + 54)),
		CODEC_ID_ZLIB((0 + 55)),
		CODEC_ID_QTRLE((0 + 56)),
		CODEC_ID_TSCC((0 + 57)),
		CODEC_ID_ULTI((0 + 58)),
		CODEC_ID_QDRAW((0 + 59)),
		CODEC_ID_VIXL((0 + 60)),
		CODEC_ID_QPEG((0 + 61)),
		CODEC_ID_PNG((0 + 62)),
		CODEC_ID_PPM((0 + 63)),
		CODEC_ID_PBM((0 + 64)),
		CODEC_ID_PGM((0 + 65)),
		CODEC_ID_PGMYUV((0 + 66)),
		CODEC_ID_PAM((0 + 67)),
		CODEC_ID_FFVHUFF((0 + 68)),
		CODEC_ID_RV30((0 + 69)),
		CODEC_ID_RV40((0 + 70)),
		CODEC_ID_VC1((0 + 71)),
		CODEC_ID_WMV3((0 + 72)),
		CODEC_ID_LOCO((0 + 73)),
		CODEC_ID_WNV1((0 + 74)),
		CODEC_ID_AASC((0 + 75)),
		CODEC_ID_INDEO2((0 + 76)),
		CODEC_ID_FRAPS((0 + 77)),
		CODEC_ID_TRUEMOTION2((0 + 78)),
		CODEC_ID_BMP((0 + 79)),
		CODEC_ID_CSCD((0 + 80)),
		CODEC_ID_MMVIDEO((0 + 81)),
		CODEC_ID_ZMBV((0 + 82)),
		CODEC_ID_AVS((0 + 83)),
		CODEC_ID_SMACKVIDEO((0 + 84)),
		CODEC_ID_NUV((0 + 85)),
		CODEC_ID_KMVC((0 + 86)),
		CODEC_ID_FLASHSV((0 + 87)),
		CODEC_ID_CAVS((0 + 88)),
		CODEC_ID_JPEG2000((0 + 89)),
		CODEC_ID_VMNC((0 + 90)),
		CODEC_ID_VP5((0 + 91)),
		CODEC_ID_VP6((0 + 92)),
		CODEC_ID_VP6F((0 + 93)),
		CODEC_ID_TARGA((0 + 94)),
		CODEC_ID_DSICINVIDEO((0 + 95)),
		CODEC_ID_TIERTEXSEQVIDEO((0 + 96)),
		CODEC_ID_TIFF((0 + 97)),
		CODEC_ID_GIF((0 + 98)),
		CODEC_ID_DXA((0 + 99)),
		CODEC_ID_DNXHD((0 + 100)),
		CODEC_ID_THP((0 + 101)),
		CODEC_ID_SGI((0 + 102)),
		CODEC_ID_C93((0 + 103)),
		CODEC_ID_BETHSOFTVID((0 + 104)),
		CODEC_ID_PTX((0 + 105)),
		CODEC_ID_TXD((0 + 106)),
		CODEC_ID_VP6A((0 + 107)),
		CODEC_ID_AMV((0 + 108)),
		CODEC_ID_VB((0 + 109)),
		CODEC_ID_PCX((0 + 110)),
		CODEC_ID_SUNRAST((0 + 111)),
		CODEC_ID_INDEO4((0 + 112)),
		CODEC_ID_INDEO5((0 + 113)),
		CODEC_ID_MIMIC((0 + 114)),
		CODEC_ID_RL2((0 + 115)),
		CODEC_ID_ESCAPE124((0 + 116)),
		CODEC_ID_DIRAC((0 + 117)),
		CODEC_ID_BFI((0 + 118)),
		CODEC_ID_CMV((0 + 119)),
		CODEC_ID_MOTIONPIXELS((0 + 120)),
		CODEC_ID_TGV((0 + 121)),
		CODEC_ID_TGQ((0 + 122)),
		CODEC_ID_TQI((0 + 123)),
		CODEC_ID_AURA((0 + 124)),
		CODEC_ID_AURA2((0 + 125)),
		CODEC_ID_V210X((0 + 126)),
		CODEC_ID_TMV((0 + 127)),
		CODEC_ID_V210((0 + 128)),
		CODEC_ID_DPX((0 + 129)),
		CODEC_ID_MAD((0 + 130)),
		CODEC_ID_FRWU((0 + 131)),
		CODEC_ID_FLASHSV2((0 + 132)),
		CODEC_ID_CDGRAPHICS((0 + 133)),
		CODEC_ID_R210((0 + 134)),
		CODEC_ID_ANM((0 + 135)),
		CODEC_ID_BINKVIDEO((0 + 136)),
		CODEC_ID_IFF_ILBM((0 + 137)),
		CODEC_ID_IFF_BYTERUN1((0 + 138)),
		CODEC_ID_KGV1((0 + 139)),
		CODEC_ID_YOP((0 + 140)),
		CODEC_ID_VP8((0 + 141)),
		CODEC_ID_PICTOR((0 + 142)),
		CODEC_ID_ANSI((0 + 143)),
		CODEC_ID_A64_MULTI((0 + 144)),
		CODEC_ID_A64_MULTI5((0 + 145)),
		CODEC_ID_R10K((0 + 146)),
		CODEC_ID_MXPEG((0 + 147)),
		CODEC_ID_LAGARITH((0 + 148)),
		CODEC_ID_PRORES((0 + 149)),
		CODEC_ID_JV((0 + 150)),
		CODEC_ID_DFA((0 + 151)),
		CODEC_ID_WMV3IMAGE((0 + 152)),
		CODEC_ID_VC1IMAGE((0 + 153)),
		CODEC_ID_UTVIDEO((0 + 154)),
		CODEC_ID_BMV_VIDEO((0 + 155)),
		CODEC_ID_VBLE((0 + 156)),
		CODEC_ID_DXTORY((0 + 157)),
		CODEC_ID_V410((0 + 158)),
		CODEC_ID_XWD((0 + 159)),
		CODEC_ID_CDXL((0 + 160)),
		CODEC_ID_XBM((0 + 161)),
		CODEC_ID_ZEROCODEC((0 + 162)),
		CODEC_ID_MSS1((0 + 163)),
		CODEC_ID_MSA1((0 + 164)),
		CODEC_ID_TSCC2((0 + 165)),
		CODEC_ID_MTS2((0 + 166)),
		CODEC_ID_CLLC((0 + 167)),
		CODEC_ID_Y41P((('P') | (('1') << 8) | (('4') << 16) | ('Y' << 24))),
		CODEC_ID_ESCAPE130((('0') | (('3') << 8) | (('1') << 16) | ('E' << 24))),
		CODEC_ID_EXR((('R') | (('X') << 8) | (('E') << 16) | ('0' << 24))),
		CODEC_ID_AVRP((('P') | (('R') << 8) | (('V') << 16) | ('A' << 24))),
		CODEC_ID_G2M((('M') | (('2') << 8) | (('G') << 16) | (0 << 24))),
		CODEC_ID_AVUI((('I') | (('U') << 8) | (('V') << 16) | ('A' << 24))),
		CODEC_ID_AYUV((('V') | (('U') << 8) | (('Y') << 16) | ('A' << 24))),
		CODEC_ID_V308((('8') | (('0') << 8) | (('3') << 16) | ('V' << 24))),
		CODEC_ID_V408((('8') | (('0') << 8) | (('4') << 16) | ('V' << 24))),
		CODEC_ID_YUV4((('4') | (('V') << 8) | (('U') << 16) | ('Y' << 24))),
		CODEC_ID_SANM((('M') | (('N') << 8) | (('A') << 16) | ('S' << 24))),
		CODEC_ID_PAF_VIDEO((('V') | (('F') << 8) | (('A') << 16) | ('P' << 24))),
		CODEC_ID_SNOW(('W') | (('O') << 8) | (('N') << 16) | ('S' << 24)),
		/**
		 * various PCM "codecs"<br>
		 * < A dummy id pointing at the start of audio codecs
		 */
		CODEC_ID_FIRST_AUDIO(0x10000),
		CODEC_ID_PCM_S16LE(0x10000),
		CODEC_ID_PCM_S16BE((0x10000 + 1)),
		CODEC_ID_PCM_U16LE((0x10000 + 2)),
		CODEC_ID_PCM_U16BE((0x10000 + 3)),
		CODEC_ID_PCM_S8((0x10000 + 4)),
		CODEC_ID_PCM_U8((0x10000 + 5)),
		CODEC_ID_PCM_MULAW((0x10000 + 6)),
		CODEC_ID_PCM_ALAW((0x10000 + 7)),
		CODEC_ID_PCM_S32LE((0x10000 + 8)),
		CODEC_ID_PCM_S32BE((0x10000 + 9)),
		CODEC_ID_PCM_U32LE((0x10000 + 10)),
		CODEC_ID_PCM_U32BE((0x10000 + 11)),
		CODEC_ID_PCM_S24LE((0x10000 + 12)),
		CODEC_ID_PCM_S24BE((0x10000 + 13)),
		CODEC_ID_PCM_U24LE((0x10000 + 14)),
		CODEC_ID_PCM_U24BE((0x10000 + 15)),
		CODEC_ID_PCM_S24DAUD((0x10000 + 16)),
		CODEC_ID_PCM_ZORK((0x10000 + 17)),
		CODEC_ID_PCM_S16LE_PLANAR((0x10000 + 18)),
		CODEC_ID_PCM_DVD((0x10000 + 19)),
		CODEC_ID_PCM_F32BE((0x10000 + 20)),
		CODEC_ID_PCM_F32LE((0x10000 + 21)),
		CODEC_ID_PCM_F64BE((0x10000 + 22)),
		CODEC_ID_PCM_F64LE((0x10000 + 23)),
		CODEC_ID_PCM_BLURAY((0x10000 + 24)),
		CODEC_ID_PCM_LXF((0x10000 + 25)),
		CODEC_ID_S302M((0x10000 + 26)),
		CODEC_ID_PCM_S8_PLANAR((0x10000 + 27)),
		/** various ADPCM codecs */
		CODEC_ID_ADPCM_IMA_QT(0x11000),
		CODEC_ID_ADPCM_IMA_WAV((0x11000 + 1)),
		CODEC_ID_ADPCM_IMA_DK3((0x11000 + 2)),
		CODEC_ID_ADPCM_IMA_DK4((0x11000 + 3)),
		CODEC_ID_ADPCM_IMA_WS((0x11000 + 4)),
		CODEC_ID_ADPCM_IMA_SMJPEG((0x11000 + 5)),
		CODEC_ID_ADPCM_MS((0x11000 + 6)),
		CODEC_ID_ADPCM_4XM((0x11000 + 7)),
		CODEC_ID_ADPCM_XA((0x11000 + 8)),
		CODEC_ID_ADPCM_ADX((0x11000 + 9)),
		CODEC_ID_ADPCM_EA((0x11000 + 10)),
		CODEC_ID_ADPCM_G726((0x11000 + 11)),
		CODEC_ID_ADPCM_CT((0x11000 + 12)),
		CODEC_ID_ADPCM_SWF((0x11000 + 13)),
		CODEC_ID_ADPCM_YAMAHA((0x11000 + 14)),
		CODEC_ID_ADPCM_SBPRO_4((0x11000 + 15)),
		CODEC_ID_ADPCM_SBPRO_3((0x11000 + 16)),
		CODEC_ID_ADPCM_SBPRO_2((0x11000 + 17)),
		CODEC_ID_ADPCM_THP((0x11000 + 18)),
		CODEC_ID_ADPCM_IMA_AMV((0x11000 + 19)),
		CODEC_ID_ADPCM_EA_R1((0x11000 + 20)),
		CODEC_ID_ADPCM_EA_R3((0x11000 + 21)),
		CODEC_ID_ADPCM_EA_R2((0x11000 + 22)),
		CODEC_ID_ADPCM_IMA_EA_SEAD((0x11000 + 23)),
		CODEC_ID_ADPCM_IMA_EA_EACS((0x11000 + 24)),
		CODEC_ID_ADPCM_EA_XAS((0x11000 + 25)),
		CODEC_ID_ADPCM_EA_MAXIS_XA((0x11000 + 26)),
		CODEC_ID_ADPCM_IMA_ISS((0x11000 + 27)),
		CODEC_ID_ADPCM_G722((0x11000 + 28)),
		CODEC_ID_ADPCM_IMA_APC((0x11000 + 29)),
		CODEC_ID_VIMA((('A') | (('M') << 8) | (('I') << 16) | ('V' << 24))),
		/** AMR */
		CODEC_ID_AMR_NB(0x12000),
		CODEC_ID_AMR_WB((0x12000 + 1)),
		/** RealAudio codecs */
		CODEC_ID_RA_144(0x13000),
		CODEC_ID_RA_288((0x13000 + 1)),
		/** various DPCM codecs */
		CODEC_ID_ROQ_DPCM(0x14000),
		CODEC_ID_INTERPLAY_DPCM((0x14000 + 1)),
		CODEC_ID_XAN_DPCM((0x14000 + 2)),
		CODEC_ID_SOL_DPCM((0x14000 + 3)),
		/** audio codecs */
		CODEC_ID_MP2(0x15000),
		/** < preferred ID for decoding MPEG audio layer 1, 2 or 3 */
		CODEC_ID_MP3((0x15000 + 1)),
		CODEC_ID_AAC((0x15000 + 2)),
		CODEC_ID_AC3((0x15000 + 3)),
		CODEC_ID_DTS((0x15000 + 4)),
		CODEC_ID_VORBIS((0x15000 + 5)),
		CODEC_ID_DVAUDIO((0x15000 + 6)),
		CODEC_ID_WMAV1((0x15000 + 7)),
		CODEC_ID_WMAV2((0x15000 + 8)),
		CODEC_ID_MACE3((0x15000 + 9)),
		CODEC_ID_MACE6((0x15000 + 10)),
		CODEC_ID_VMDAUDIO((0x15000 + 11)),
		CODEC_ID_FLAC((0x15000 + 12)),
		CODEC_ID_MP3ADU((0x15000 + 13)),
		CODEC_ID_MP3ON4((0x15000 + 14)),
		CODEC_ID_SHORTEN((0x15000 + 15)),
		CODEC_ID_ALAC((0x15000 + 16)),
		CODEC_ID_WESTWOOD_SND1((0x15000 + 17)),
		/** < as in Berlin toast format */
		CODEC_ID_GSM((0x15000 + 18)),
		CODEC_ID_QDM2((0x15000 + 19)),
		CODEC_ID_COOK((0x15000 + 20)),
		CODEC_ID_TRUESPEECH((0x15000 + 21)),
		CODEC_ID_TTA((0x15000 + 22)),
		CODEC_ID_SMACKAUDIO((0x15000 + 23)),
		CODEC_ID_QCELP((0x15000 + 24)),
		CODEC_ID_WAVPACK((0x15000 + 25)),
		CODEC_ID_DSICINAUDIO((0x15000 + 26)),
		CODEC_ID_IMC((0x15000 + 27)),
		CODEC_ID_MUSEPACK7((0x15000 + 28)),
		CODEC_ID_MLP((0x15000 + 29)),
		/** as found in WAV */
		CODEC_ID_GSM_MS((0x15000 + 30)),
		CODEC_ID_ATRAC3((0x15000 + 31)),
		CODEC_ID_VOXWARE((0x15000 + 32)),
		CODEC_ID_APE((0x15000 + 33)),
		CODEC_ID_NELLYMOSER((0x15000 + 34)),
		CODEC_ID_MUSEPACK8((0x15000 + 35)),
		CODEC_ID_SPEEX((0x15000 + 36)),
		CODEC_ID_WMAVOICE((0x15000 + 37)),
		CODEC_ID_WMAPRO((0x15000 + 38)),
		CODEC_ID_WMALOSSLESS((0x15000 + 39)),
		CODEC_ID_ATRAC3P((0x15000 + 40)),
		CODEC_ID_EAC3((0x15000 + 41)),
		CODEC_ID_SIPR((0x15000 + 42)),
		CODEC_ID_MP1((0x15000 + 43)),
		CODEC_ID_TWINVQ((0x15000 + 44)),
		CODEC_ID_TRUEHD((0x15000 + 45)),
		CODEC_ID_MP4ALS((0x15000 + 46)),
		CODEC_ID_ATRAC1((0x15000 + 47)),
		CODEC_ID_BINKAUDIO_RDFT((0x15000 + 48)),
		CODEC_ID_BINKAUDIO_DCT((0x15000 + 49)),
		CODEC_ID_AAC_LATM((0x15000 + 50)),
		CODEC_ID_QDMC((0x15000 + 51)),
		CODEC_ID_CELT((0x15000 + 52)),
		CODEC_ID_G723_1((0x15000 + 53)),
		CODEC_ID_G729((0x15000 + 54)),
		CODEC_ID_8SVX_EXP((0x15000 + 55)),
		CODEC_ID_8SVX_FIB((0x15000 + 56)),
		CODEC_ID_BMV_AUDIO((0x15000 + 57)),
		CODEC_ID_RALF((0x15000 + 58)),
		CODEC_ID_IAC((0x15000 + 59)),
		CODEC_ID_ILBC((0x15000 + 60)),
		CODEC_ID_FFWAVESYNTH((('S') | (('W') << 8) | (('F') << 16) | ('F' << 24))),
		CODEC_ID_SONIC((('C') | (('N') << 8) | (('O') << 16) | ('S' << 24))),
		CODEC_ID_SONIC_LS((('L') | (('N') << 8) | (('O') << 16) | ('S' << 24))),
		CODEC_ID_PAF_AUDIO((('A') | (('F') << 8) | (('A') << 16) | ('P' << 24))),
		CODEC_ID_OPUS((('S') | (('U') << 8) | (('P') << 16) | ('O' << 24))),
		/**
		 * subtitle codecs<br>
		 * < A dummy ID pointing at the start of subtitle codecs.
		 */
		CODEC_ID_FIRST_SUBTITLE(0x17000),
		CODEC_ID_DVD_SUBTITLE(0x17000),
		CODEC_ID_DVB_SUBTITLE((0x17000 + 1)),
		/** < raw UTF-8 text */
		CODEC_ID_TEXT((0x17000 + 2)),
		CODEC_ID_XSUB((0x17000 + 3)),
		CODEC_ID_SSA((0x17000 + 4)),
		CODEC_ID_MOV_TEXT((0x17000 + 5)),
		CODEC_ID_HDMV_PGS_SUBTITLE((0x17000 + 6)),
		CODEC_ID_DVB_TELETEXT((0x17000 + 7)),
		CODEC_ID_SRT((0x17000 + 8)),
		CODEC_ID_MICRODVD((('D') | (('V') << 8) | (('D') << 16) | ('m' << 24))),
		CODEC_ID_EIA_608((('8') | (('0') << 8) | (('6') << 16) | ('c' << 24))),
		CODEC_ID_JACOSUB((('B') | (('U') << 8) | (('S') << 16) | ('J' << 24))),
		CODEC_ID_SAMI((('I') | (('M') << 8) | (('A') << 16) | ('S' << 24))),
		CODEC_ID_REALTEXT((('T') | (('X') << 8) | (('T') << 16) | ('R' << 24))),
		CODEC_ID_SUBVIEWER((('V') | (('b') << 8) | (('u') << 16) | ('S' << 24))),
		/**
		 * other specific kind of codecs (generally used for attachments)<br>
		 * < A dummy ID pointing at the start of various fake codecs.
		 */
		CODEC_ID_FIRST_UNKNOWN(0x18000),
		CODEC_ID_TTF(0x18000),
		CODEC_ID_BINTEXT((('T') | (('X') << 8) | (('T') << 16) | ('B' << 24))),
		CODEC_ID_XBIN((('N') | (('I') << 8) | (('B') << 16) | ('X' << 24))),
		CODEC_ID_IDF((('F') | (('D') << 8) | (('I') << 16) | (0 << 24))),
		CODEC_ID_OTF((('F') | (('T') << 8) | (('O') << 16) | (0 << 24))),
		/** < codec_id is not known (like CODEC_ID_NONE) but lavf should attempt to identify it */
		CODEC_ID_PROBE(0x19000),
		/**
		 * < _FAKE_ codec to indicate a raw MPEG-2 TS<br>
		 * stream (only used by libavformat)
		 */
		CODEC_ID_MPEG2TS(0x20000),
		/**
		 * < _FAKE_ codec to indicate a MPEG-4 Systems<br>
		 * stream (only used by libavformat)
		 */
		CODEC_ID_MPEG4SYSTEMS(0x20001),
		/** < Dummy codec for streams containing only metadata information. */
		CODEC_ID_FFMETADATA(0x21000);
		AVCodecID(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVCodecID > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVCodecID > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:786</i>
	 */
	public enum AVDiscard implements IntValuedEnum<AVDiscard > {
		/**
		 * We leave some space between them for extensions (drop some<br>
		 * keyframes for intra-only or drop just some bidir frames).<br>
		 * < discard nothing
		 */
		AVDISCARD_NONE(-16),
		/** < discard useless packets like 0 size packets in avi */
		AVDISCARD_DEFAULT(0),
		/** < discard all non reference */
		AVDISCARD_NONREF(8),
		/** < discard all bidirectional frames */
		AVDISCARD_BIDIR(16),
		/** < discard all frames except keyframes */
		AVDISCARD_NONKEY(32),
		/** < discard all */
		AVDISCARD_ALL(48);
		AVDiscard(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVDiscard > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVDiscard > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:801</i>
	 */
	public enum AVColorPrimaries implements IntValuedEnum<AVColorPrimaries > {
		/** < also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP177 Annex B */
		AVCOL_PRI_BT709(1),
		AVCOL_PRI_UNSPECIFIED(2),
		AVCOL_PRI_BT470M(4),
		/** < also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM */
		AVCOL_PRI_BT470BG(5),
		/** < also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC */
		AVCOL_PRI_SMPTE170M(6),
		/** < functionally identical to above */
		AVCOL_PRI_SMPTE240M(7),
		AVCOL_PRI_FILM(8),
		/** < Not part of ABI */
		AVCOL_PRI_NB(9);
		AVColorPrimaries(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorPrimaries > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorPrimaries > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:813</i>
	 */
	public enum AVColorTransferCharacteristic implements IntValuedEnum<AVColorTransferCharacteristic > {
		/** < also ITU-R BT1361 */
		AVCOL_TRC_BT709(1),
		AVCOL_TRC_UNSPECIFIED(2),
		/** < also ITU-R BT470M / ITU-R BT1700 625 PAL & SECAM */
		AVCOL_TRC_GAMMA22(4),
		/** < also ITU-R BT470BG */
		AVCOL_TRC_GAMMA28(5),
		AVCOL_TRC_SMPTE240M(7),
		/** < Not part of ABI */
		AVCOL_TRC_NB(8);
		AVColorTransferCharacteristic(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorTransferCharacteristic > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVColorTransferCharacteristic > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:827</i>
	 */
	public enum AVChromaLocation implements IntValuedEnum<AVChromaLocation > {
		AVCHROMA_LOC_UNSPECIFIED(0),
		/** < mpeg2/4, h264 default */
		AVCHROMA_LOC_LEFT(1),
		/** < mpeg1, jpeg, h263 */
		AVCHROMA_LOC_CENTER(2),
		/** < DV */
		AVCHROMA_LOC_TOPLEFT(3),
		AVCHROMA_LOC_TOP(4),
		AVCHROMA_LOC_BOTTOMLEFT(5),
		AVCHROMA_LOC_BOTTOM(6),
		/** < Not part of ABI */
		AVCHROMA_LOC_NB(7);
		AVChromaLocation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVChromaLocation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVChromaLocation > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:840</i>
	 */
	public enum AVAudioServiceType implements IntValuedEnum<AVAudioServiceType > {
		AV_AUDIO_SERVICE_TYPE_MAIN(0),
		AV_AUDIO_SERVICE_TYPE_EFFECTS(1),
		AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED(2),
		AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED(3),
		AV_AUDIO_SERVICE_TYPE_DIALOGUE(4),
		AV_AUDIO_SERVICE_TYPE_COMMENTARY(5),
		AV_AUDIO_SERVICE_TYPE_EMERGENCY(6),
		AV_AUDIO_SERVICE_TYPE_VOICE_OVER(7),
		AV_AUDIO_SERVICE_TYPE_KARAOKE(8),
		/** < Not part of ABI */
		AV_AUDIO_SERVICE_TYPE_NB(9);
		AVAudioServiceType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVAudioServiceType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVAudioServiceType > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:852</i>
	 */
	public enum AVFieldOrder implements IntValuedEnum<AVFieldOrder > {
		AV_FIELD_UNKNOWN(0),
		AV_FIELD_PROGRESSIVE(1),
		/** < Top coded_first, top displayed first */
		AV_FIELD_TT(2),
		/** < Bottom coded first, bottom displayed first */
		AV_FIELD_BB(3),
		/** < Top coded first, bottom displayed first */
		AV_FIELD_TB(4),
		/** < Bottom coded first, top displayed first */
		AV_FIELD_BT(5);
		AVFieldOrder(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVFieldOrder > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVFieldOrder > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1170</i>
	 */
	public enum AVPictureStructure implements IntValuedEnum<AVPictureStructure > {
		/** < unknown */
		AV_PICTURE_STRUCTURE_UNKNOWN(0),
		/** < coded as top field */
		AV_PICTURE_STRUCTURE_TOP_FIELD(1),
		/** < coded as bottom field */
		AV_PICTURE_STRUCTURE_BOTTOM_FIELD(2),
		/** < coded as frame */
		AV_PICTURE_STRUCTURE_FRAME(3);
		AVPictureStructure(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVPictureStructure > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<AVPictureStructure > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_CBP = (int)0x00020000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_CLOSED_GOP = (int)0x80000000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_LOSSLESS = (int)0x80000000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int AV_PKT_FLAG_KEY = (int)0x0001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_FRAME_THREADS = (int)0x1000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_NEG_LINESIZES = (int)0x0800;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_NO_OUTPUT = (int)0x00000004;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_QPEL = (int)0x0010;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_NORMALIZE_AQP = (int)0x00020000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_BITEXACT = (int)0x00800000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L0 = (int)(0x1000 | 0x2000);
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_HWACCEL = (int)0x0010;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_QUANT = (int)0x00010000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_H264 = (int)2;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L1 = (int)(0x4000 | 0x8000);
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_VARIABLE_FRAME_SIZE = (int)0x10000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_TRUNCATED = (int)0x0008;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_SHARED = (int)4;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DELAY = (int)0x0020;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INTERLACED_DCT = (int)0x00040000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_CHANNEL_CONF = (int)0x0400;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_LOW_DELAY = (int)0x00080000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int AV_PARSER_PTS_NB = (int)4;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L0L1 = (int)((0x1000 | 0x2000) | (0x4000 | 0x8000));
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GRAY = (int)0x2000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_16x8 = (int)0x0010;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA16x16 = (int)0x0002;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_VP56 = (int)3;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P0L0 = (int)0x1000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_LOOP_FILTER = (int)0x00000800;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_EMU_EDGE = (int)0x4000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DRAW_HORIZ_BAND = (int)0x0001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INTERLACED_ME = (int)0x20000000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_8x8 = (int)0x0040;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PASS2 = (int)0x0400;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PASS1 = (int)0x0200;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_16x16 = (int)0x0008;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_PARAM_CHANGE = (int)0x4000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SLICE_THREADS = (int)0x2000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int AV_GET_BUFFER_FLAG_REF = (int)(1 << 0);
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_GMC = (int)0x0400;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_AUTO_THREADS = (int)0x8000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SUBFRAMES = (int)0x0100;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA_PCM = (int)0x0004;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_HWACCEL_VDPAU = (int)0x0080;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_FAST = (int)0x00000001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_USER = (int)2;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_CHUNKS = (int)0x00008000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GLOBAL_HEADER = (int)0x00400000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P1L1 = (int)0x8000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_UNALIGNED = (int)0x0001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_DROP_FRAME_TIMECODE = (int)0x00002000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int AV_PKT_FLAG_CORRUPT = (int)0x0002;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P1L0 = (int)0x2000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_IGNORE_CROP = (int)0x00010000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_ONCE = (int)0x0002;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_4MV = (int)0x0004;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PSNR = (int)0x8000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_AC_PRED = (int)0x01000000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DR1 = (int)0x0002;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_QSCALE = (int)0x0002;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_ACPRED = (int)0x0200;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SMALL_LAST_FRAME = (int)0x0040;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_INTERNAL = (int)1;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_SKIP = (int)0x0800;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P0L1 = (int)0x4000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_8x16 = (int)0x0020;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_MV0 = (int)0x0040;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTERLACED = (int)0x0080;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_LOCAL_HEADER = (int)0x00000008;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_COPY = (int)8;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_EXPERIMENTAL = (int)0x0200;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GMC = (int)0x0020;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_VALID = (int)0x01;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_DIRECT2 = (int)0x0100;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_MPEG1 = (int)0;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_USE_CODEC_TS = (int)0x1000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_MPEG2 = (int)1;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_REUSABLE = (int)0x08;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_SHOW_ALL = (int)0x00400000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_FETCHED_OFFSET = (int)0x0004;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INPUT_PRESERVED = (int)0x0100;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_TRUNCATED = (int)0x00010000;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_PRESERVE = (int)0x04;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_COMPLETE_FRAMES = (int)0x0001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA4x4 = (int)0x0001;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_READABLE = (int)0x02;
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_INTRA_ONLY = (int)0x40000000;
	/**
	 * Original signature : <code>int avcodec_version()</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1142</i>
	 */
	public native int avcodec_version();
	/**
	 * Original signature : <code>AVCodecContext* avcodec_alloc_context3(const AVCodec*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1144</i>
	 */
	public Pointer<AVCodecContext > avcodec_alloc_context3(Pointer<AVCodec > codec) {
		return Pointer.pointerToAddress(avcodec_alloc_context3(Pointer.getPeer(codec)), AVCodecContext.class);
	}
	@Ptr 
	public native long avcodec_alloc_context3(@Ptr long codec);
	/**
	 * Original signature : <code>int avcodec_get_context_defaults3(AVCodecContext*, const AVCodec*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1146</i>
	 */
	public int avcodec_get_context_defaults3(Pointer<AVCodecContext > s, Pointer<AVCodec > codec) {
		return avcodec_get_context_defaults3(Pointer.getPeer(s), Pointer.getPeer(codec));
	}
	public native int avcodec_get_context_defaults3(@Ptr long s, @Ptr long codec);
	/**
	 * Original signature : <code>AVFrame* avcodec_alloc_frame()</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1148</i>
	 */
	public Pointer<AVFrame > alloc_frame() {
		return Pointer.pointerToAddress(avcodec_alloc_frame(), AVFrame.class);
	}
	@Ptr 
	public native long avcodec_alloc_frame();
	/**
	 * Original signature : <code>int avcodec_open2(AVCodecContext*, const AVCodec*, AVDictionary**)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1150</i>
	 */
	public int avcodec_open2(Pointer<AVCodecContext > avctx, Pointer<AVCodec > codec, Pointer<Pointer<AVDictionary > > options) {
		return avcodec_open2(Pointer.getPeer(avctx), Pointer.getPeer(codec), Pointer.getPeer(options));
	}
	public native int avcodec_open2(@Ptr long avctx, @Ptr long codec, @Ptr long options);
	/**
	 * Original signature : <code>int avcodec_close(AVCodecContext*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1152</i>
	 */
	public int avcodec_close(Pointer<AVCodecContext > avctx) {
		return avcodec_close(Pointer.getPeer(avctx));
	}
	public native int avcodec_close(@Ptr long avctx);
	/**
	 * Original signature : <code>void av_init_packet(AVPacket*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1154</i>
	 */
	public void av_init_packet(Pointer<AVPacket > pkt) {
		av_init_packet(Pointer.getPeer(pkt));
	}
	public native void av_init_packet(@Ptr long pkt);
	/**
	 * Original signature : <code>void av_free_packet(AVPacket*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1156</i>
	 */
	public void av_free_packet(Pointer<AVPacket > pkt) {
		av_free_packet(Pointer.getPeer(pkt));
	}
	public native void av_free_packet(@Ptr long pkt);
	/**
	 * Original signature : <code>int avcodec_decode_video2(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1158</i>
	 */
	public int avcodec_decode_video2(Pointer<AVCodecContext > avctx, Pointer<AVFrame > picture, Pointer<Integer > got_picture_ptr, Pointer<AVPacket > avpkt) {
		return avcodec_decode_video2(Pointer.getPeer(avctx), Pointer.getPeer(picture), Pointer.getPeer(got_picture_ptr), Pointer.getPeer(avpkt));
	}
	public native int avcodec_decode_video2(@Ptr long avctx, @Ptr long picture, @Ptr long got_picture_ptr, @Ptr long avpkt);
	/**
	 * Original signature : <code>int avcodec_decode_audio4(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1160</i>
	 */
	public int avcodec_decode_audio4(Pointer<AVCodecContext > avctx, Pointer<AVFrame > picture, Pointer<Integer > got_picture_ptr, Pointer<AVPacket > avpkt) {
		return avcodec_decode_audio4(Pointer.getPeer(avctx), Pointer.getPeer(picture), Pointer.getPeer(got_picture_ptr), Pointer.getPeer(avpkt));
	}
	public native int avcodec_decode_audio4(@Ptr long avctx, @Ptr long picture, @Ptr long got_picture_ptr, @Ptr long avpkt);
	/**
	 * Original signature : <code>AVCodec* avcodec_find_decoder(AVCodecID)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1225</i>
	 */
	public Pointer<AVCodec > avcodec_find_decoder(IntValuedEnum<AvcodecLibrary.AVCodecID > id) {
		return Pointer.pointerToAddress(avcodec_find_decoder((int)id.value()), AVCodec.class);
	}
	@Ptr 
	public native long avcodec_find_decoder(int id);
	/**
	 * Original signature : <code>AVCodec* avcodec_find_encoder(AVCodecID)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1227</i>
	 */
	public Pointer<AVCodec > avcodec_find_encoder(IntValuedEnum<AvcodecLibrary.AVCodecID > id) {
		return Pointer.pointerToAddress(avcodec_find_encoder((int)id.value()), AVCodec.class);
	}
	@Ptr 
	public native long avcodec_find_encoder(int id);
	/**
	 * Original signature : <code>int avcodec_encode_video2(AVCodecContext*, AVPacket*, const AVFrame*, int*)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1229</i>
	 */
	public int avcodec_encode_video2(Pointer<AVCodecContext > avctx, Pointer<AVPacket > avpkt, Pointer<AVFrame > frame, Pointer<Integer > got_packet_ptr) {
		return avcodec_encode_video2(Pointer.getPeer(avctx), Pointer.getPeer(avpkt), Pointer.getPeer(frame), Pointer.getPeer(got_packet_ptr));
	}
	public native int avcodec_encode_video2(@Ptr long avctx, @Ptr long avpkt, @Ptr long frame, @Ptr long got_packet_ptr);
	/**
	 * Original signature : <code>int avpicture_fill(AVPicture*, const uint8_t*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1231</i>
	 */
	public int avpicture_fill(Pointer<AVPicture > picture, Pointer<Byte > ptr, IntValuedEnum<AVPixelFormat > pix_fmt, int width, int height) {
		return avpicture_fill(Pointer.getPeer(picture), Pointer.getPeer(ptr), (int)pix_fmt.value(), width, height);
	}
	public native int avpicture_fill(@Ptr long picture, @Ptr long ptr, int pix_fmt, int width, int height);
	/**
	 * Original signature : <code>int avpicture_get_size(AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1233</i>
	 */
	public int avpicture_get_size(IntValuedEnum<AVPixelFormat> pix_fmt, int width, int height) {
		return avpicture_get_size((int)pix_fmt.value(), width, height);
	}
	public native int avpicture_get_size(int pix_fmt, int width, int height);
	/**
	 * Original signature : <code>int av_image_alloc(uint8_t*[4], int[4], int, int, AVPixelFormat, int)</code><br>
	 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/../libavcodec/avcodec.h:1235</i>
	 */
	public int av_image_alloc(Pointer<Pointer<Byte > > pointers, Pointer<Integer > linesizes, int w, int h, IntValuedEnum<AVPixelFormat > pix_fmt, int align) {
		return av_image_alloc(Pointer.getPeer(pointers), Pointer.getPeer(linesizes), w, h, (int)pix_fmt.value(), align);
	}
	public native int av_image_alloc(@Ptr long pointers,@Ptr long linesize, int w, int h, int pxl_fmt, int align);
	/** C type : const AVClass* */
	public Pointer<AVClass > av_class() {
		try {
			return (Pointer<AVClass >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("av_class").as(DefaultParameterizedType.paramType(Pointer.class, AVClass.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : const AVClass* */
	public AvcodecLibrary av_class(Pointer<AVClass > av_class) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("av_class").as(DefaultParameterizedType.paramType(Pointer.class, AVClass.class)).set(av_class);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int log_level_offset() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("log_level_offset").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary log_level_offset(int log_level_offset) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("log_level_offset").as(int.class).set(log_level_offset);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * see AVMEDIA_TYPE_xxx<br>
	 * C type : AVMediaType
	 */
	public IntValuedEnum<AVMediaType > codec_type() {
		try {
			return (IntValuedEnum<AVMediaType >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_type").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVMediaType.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * see AVMEDIA_TYPE_xxx<br>
	 * C type : AVMediaType
	 */
	public AvcodecLibrary codec_type(IntValuedEnum<AVMediaType > codec_type) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_type").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVMediaType.class)).set(codec_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVCodec* */
	public Pointer<AVCodec > codec() {
		try {
			return (Pointer<AVCodec >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec").as(DefaultParameterizedType.paramType(Pointer.class, AVCodec.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVCodec* */
	public AvcodecLibrary codec(Pointer<AVCodec > codec) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec").as(DefaultParameterizedType.paramType(Pointer.class, AVCodec.class)).set(codec);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char[32] */
	@Array({32}) 
	public Pointer<Byte > codec_name() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_name").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * see AV_CODEC_ID_xxx<br>
	 * C type : AVCodecID
	 */
	public IntValuedEnum<AvcodecLibrary.AVCodecID > codec_id() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVCodecID >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_id").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVCodecID.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * see AV_CODEC_ID_xxx<br>
	 * C type : AVCodecID
	 */
	public AvcodecLibrary codec_id(IntValuedEnum<AvcodecLibrary.AVCodecID > codec_id) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_id").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVCodecID.class)).set(codec_id);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int codec_tag() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_tag").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary codec_tag(int codec_tag) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_tag").as(int.class).set(codec_tag);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int stream_codec_tag() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("stream_codec_tag").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary stream_codec_tag(int stream_codec_tag) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("stream_codec_tag").as(int.class).set(stream_codec_tag);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public Pointer<? > priv_data() {
		try {
			return (Pointer<? >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("priv_data").as(DefaultParameterizedType.paramType(Pointer.class, null)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public AvcodecLibrary priv_data(Pointer<? > priv_data) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("priv_data").as(DefaultParameterizedType.paramType(Pointer.class, null)).set(priv_data);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Conversion Error : AVCodecInternal* (failed to convert type to Java (undefined type)) */
	/** C type : void* */
	public Pointer<? > opaque() {
		try {
			return (Pointer<? >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("opaque").as(DefaultParameterizedType.paramType(Pointer.class, null)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public AvcodecLibrary opaque(Pointer<? > opaque) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("opaque").as(DefaultParameterizedType.paramType(Pointer.class, null)).set(opaque);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bit_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("bit_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary bit_rate(int bit_rate) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("bit_rate").as(int.class).set(bit_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bit_rate_tolerance() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("bit_rate_tolerance").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary bit_rate_tolerance(int bit_rate_tolerance) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("bit_rate_tolerance").as(int.class).set(bit_rate_tolerance);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int global_quality() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("global_quality").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary global_quality(int global_quality) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("global_quality").as(int.class).set(global_quality);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int compression_level() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("compression_level").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary compression_level(int compression_level) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("compression_level").as(int.class).set(compression_level);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int flags() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("flags").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary flags(int flags) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("flags").as(int.class).set(flags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int flags2() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("flags2").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary flags2(int flags2) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("flags2").as(int.class).set(flags2);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint8_t* */
	public Pointer<Byte > extradata() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("extradata").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint8_t* */
	public AvcodecLibrary extradata(Pointer<Byte > extradata) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("extradata").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(extradata);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int extradata_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("extradata_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary extradata_size(int extradata_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("extradata_size").as(int.class).set(extradata_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AVRational time_base() {
		try {
			return (AVRational)BridJ.getNativeLibrary("avcodec").getSymbolPointer("time_base").as(AVRational.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AvcodecLibrary time_base(AVRational time_base) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("time_base").as(AVRational.class).set(time_base);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int ticks_per_frame() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("ticks_per_frame").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary ticks_per_frame(int ticks_per_frame) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("ticks_per_frame").as(int.class).set(ticks_per_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int delay() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("delay").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary delay(int delay) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("delay").as(int.class).set(delay);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int width() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("width").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary width(int width) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("width").as(int.class).set(width);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int height() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary height(int height) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("height").as(int.class).set(height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int coded_width() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_width").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary coded_width(int coded_width) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_width").as(int.class).set(coded_width);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int coded_height() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary coded_height(int coded_height) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_height").as(int.class).set(coded_height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int gop_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("gop_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary gop_size(int gop_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("gop_size").as(int.class).set(gop_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVPixelFormat */
	public IntValuedEnum<AVPixelFormat > pix_fmt() {
		try {
			return (IntValuedEnum<AVPixelFormat >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pix_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVPixelFormat.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVPixelFormat */
	public AvcodecLibrary pix_fmt(IntValuedEnum<AVPixelFormat > pix_fmt) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pix_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVPixelFormat.class)).set(pix_fmt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_method() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_method").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_method(int me_method) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_method").as(int.class).set(me_method);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int max_b_frames() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_b_frames").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary max_b_frames(int max_b_frames) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_b_frames").as(int.class).set(max_b_frames);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float b_quant_factor() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_quant_factor").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary b_quant_factor(float b_quant_factor) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_quant_factor").as(float.class).set(b_quant_factor);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_strategy() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_strategy").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_strategy(int rc_strategy) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_strategy").as(int.class).set(rc_strategy);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int b_frame_strategy() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_frame_strategy").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary b_frame_strategy(int b_frame_strategy) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_frame_strategy").as(int.class).set(b_frame_strategy);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float b_quant_offset() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_quant_offset").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary b_quant_offset(float b_quant_offset) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_quant_offset").as(float.class).set(b_quant_offset);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int has_b_frames() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("has_b_frames").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary has_b_frames(int has_b_frames) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("has_b_frames").as(int.class).set(has_b_frames);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mpeg_quant() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mpeg_quant").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mpeg_quant(int mpeg_quant) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mpeg_quant").as(int.class).set(mpeg_quant);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float i_quant_factor() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_quant_factor").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary i_quant_factor(float i_quant_factor) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_quant_factor").as(float.class).set(i_quant_factor);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float i_quant_offset() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_quant_offset").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary i_quant_offset(float i_quant_offset) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_quant_offset").as(float.class).set(i_quant_offset);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float lumi_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("lumi_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary lumi_masking(float lumi_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("lumi_masking").as(float.class).set(lumi_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float temporal_cplx_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("temporal_cplx_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary temporal_cplx_masking(float temporal_cplx_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("temporal_cplx_masking").as(float.class).set(temporal_cplx_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float spatial_cplx_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("spatial_cplx_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary spatial_cplx_masking(float spatial_cplx_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("spatial_cplx_masking").as(float.class).set(spatial_cplx_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float p_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary p_masking(float p_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_masking").as(float.class).set(p_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float dark_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("dark_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary dark_masking(float dark_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("dark_masking").as(float.class).set(dark_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int slice_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary slice_count(int slice_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_count").as(int.class).set(slice_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int prediction_method() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("prediction_method").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary prediction_method(int prediction_method) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("prediction_method").as(int.class).set(prediction_method);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : int* */
	public Pointer<Integer > slice_offset() {
		try {
			return (Pointer<Integer >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_offset").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : int* */
	public AvcodecLibrary slice_offset(Pointer<Integer > slice_offset) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_offset").as(DefaultParameterizedType.paramType(Pointer.class, Integer.class)).set(slice_offset);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AVRational sample_aspect_ratio() {
		try {
			return (AVRational)BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_aspect_ratio").as(AVRational.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AvcodecLibrary sample_aspect_ratio(AVRational sample_aspect_ratio) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_aspect_ratio").as(AVRational.class).set(sample_aspect_ratio);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_cmp(int me_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_cmp").as(int.class).set(me_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_sub_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_sub_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_sub_cmp(int me_sub_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_sub_cmp").as(int.class).set(me_sub_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mb_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mb_cmp(int mb_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_cmp").as(int.class).set(mb_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int ildct_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("ildct_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary ildct_cmp(int ildct_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("ildct_cmp").as(int.class).set(ildct_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int dia_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("dia_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary dia_size(int dia_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("dia_size").as(int.class).set(dia_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int last_predictor_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("last_predictor_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary last_predictor_count(int last_predictor_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("last_predictor_count").as(int.class).set(last_predictor_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int pre_me() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pre_me").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary pre_me(int pre_me) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pre_me").as(int.class).set(pre_me);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_pre_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_pre_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_pre_cmp(int me_pre_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_pre_cmp").as(int.class).set(me_pre_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int pre_dia_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pre_dia_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary pre_dia_size(int pre_dia_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pre_dia_size").as(int.class).set(pre_dia_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_subpel_quality() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_subpel_quality").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_subpel_quality(int me_subpel_quality) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_subpel_quality").as(int.class).set(me_subpel_quality);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int dtg_active_format() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("dtg_active_format").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary dtg_active_format(int dtg_active_format) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("dtg_active_format").as(int.class).set(dtg_active_format);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_range() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_range").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_range(int me_range) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_range").as(int.class).set(me_range);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int intra_quant_bias() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_quant_bias").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary intra_quant_bias(int intra_quant_bias) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_quant_bias").as(int.class).set(intra_quant_bias);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int inter_quant_bias() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("inter_quant_bias").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary inter_quant_bias(int inter_quant_bias) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("inter_quant_bias").as(int.class).set(inter_quant_bias);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int slice_flags() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_flags").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary slice_flags(int slice_flags) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("slice_flags").as(int.class).set(slice_flags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int xvmc_acceleration() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("xvmc_acceleration").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary xvmc_acceleration(int xvmc_acceleration) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("xvmc_acceleration").as(int.class).set(xvmc_acceleration);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mb_decision() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_decision").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mb_decision(int mb_decision) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_decision").as(int.class).set(mb_decision);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint16_t* */
	public Pointer<Short > intra_matrix() {
		try {
			return (Pointer<Short >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_matrix").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint16_t* */
	public AvcodecLibrary intra_matrix(Pointer<Short > intra_matrix) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_matrix").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).set(intra_matrix);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint16_t* */
	public Pointer<Short > inter_matrix() {
		try {
			return (Pointer<Short >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("inter_matrix").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint16_t* */
	public AvcodecLibrary inter_matrix(Pointer<Short > inter_matrix) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("inter_matrix").as(DefaultParameterizedType.paramType(Pointer.class, Short.class)).set(inter_matrix);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int scenechange_threshold() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("scenechange_threshold").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary scenechange_threshold(int scenechange_threshold) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("scenechange_threshold").as(int.class).set(scenechange_threshold);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int noise_reduction() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("noise_reduction").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary noise_reduction(int noise_reduction) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("noise_reduction").as(int.class).set(noise_reduction);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_threshold() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_threshold").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_threshold(int me_threshold) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_threshold").as(int.class).set(me_threshold);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mb_threshold() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_threshold").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mb_threshold(int mb_threshold) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_threshold").as(int.class).set(mb_threshold);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int intra_dc_precision() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_dc_precision").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary intra_dc_precision(int intra_dc_precision) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("intra_dc_precision").as(int.class).set(intra_dc_precision);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int skip_top() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_top").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary skip_top(int skip_top) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_top").as(int.class).set(skip_top);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int skip_bottom() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_bottom").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary skip_bottom(int skip_bottom) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_bottom").as(int.class).set(skip_bottom);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float border_masking() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("border_masking").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary border_masking(float border_masking) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("border_masking").as(float.class).set(border_masking);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mb_lmin() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_lmin").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mb_lmin(int mb_lmin) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_lmin").as(int.class).set(mb_lmin);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mb_lmax() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_lmax").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mb_lmax(int mb_lmax) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mb_lmax").as(int.class).set(mb_lmax);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int me_penalty_compensation() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_penalty_compensation").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary me_penalty_compensation(int me_penalty_compensation) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("me_penalty_compensation").as(int.class).set(me_penalty_compensation);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bidir_refine() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("bidir_refine").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary bidir_refine(int bidir_refine) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("bidir_refine").as(int.class).set(bidir_refine);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int brd_scale() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("brd_scale").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary brd_scale(int brd_scale) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("brd_scale").as(int.class).set(brd_scale);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int keyint_min() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("keyint_min").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary keyint_min(int keyint_min) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("keyint_min").as(int.class).set(keyint_min);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int refs() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("refs").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary refs(int refs) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("refs").as(int.class).set(refs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int chromaoffset() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("chromaoffset").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary chromaoffset(int chromaoffset) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("chromaoffset").as(int.class).set(chromaoffset);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int scenechange_factor() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("scenechange_factor").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary scenechange_factor(int scenechange_factor) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("scenechange_factor").as(int.class).set(scenechange_factor);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mv0_threshold() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mv0_threshold").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mv0_threshold(int mv0_threshold) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mv0_threshold").as(int.class).set(mv0_threshold);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int b_sensitivity() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_sensitivity").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary b_sensitivity(int b_sensitivity) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("b_sensitivity").as(int.class).set(b_sensitivity);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorPrimaries */
	public IntValuedEnum<AvcodecLibrary.AVColorPrimaries > color_primaries() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVColorPrimaries >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_primaries").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVColorPrimaries.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorPrimaries */
	public AvcodecLibrary color_primaries(IntValuedEnum<AvcodecLibrary.AVColorPrimaries > color_primaries) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_primaries").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVColorPrimaries.class)).set(color_primaries);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorTransferCharacteristic */
	public IntValuedEnum<AvcodecLibrary.AVColorTransferCharacteristic > color_trc() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVColorTransferCharacteristic >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_trc").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVColorTransferCharacteristic.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorTransferCharacteristic */
	public AvcodecLibrary color_trc(IntValuedEnum<AvcodecLibrary.AVColorTransferCharacteristic > color_trc) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_trc").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVColorTransferCharacteristic.class)).set(color_trc);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorSpace */
	public IntValuedEnum<AVColorSpace > colorspace() {
		try {
			return (IntValuedEnum<AVColorSpace >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("colorspace").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVColorSpace.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorSpace */
	public AvcodecLibrary colorspace(IntValuedEnum<AVColorSpace > colorspace) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("colorspace").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVColorSpace.class)).set(colorspace);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorRange */
	public IntValuedEnum<AVColorRange > color_range() {
		try {
			return (IntValuedEnum<AVColorRange >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_range").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVColorRange.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVColorRange */
	public AvcodecLibrary color_range(IntValuedEnum<AVColorRange > color_range) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("color_range").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVColorRange.class)).set(color_range);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVChromaLocation */
	public IntValuedEnum<AvcodecLibrary.AVChromaLocation > chroma_sample_location() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVChromaLocation >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("chroma_sample_location").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVChromaLocation.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVChromaLocation */
	public AvcodecLibrary chroma_sample_location(IntValuedEnum<AvcodecLibrary.AVChromaLocation > chroma_sample_location) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("chroma_sample_location").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVChromaLocation.class)).set(chroma_sample_location);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int slices() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("slices").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary slices(int slices) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("slices").as(int.class).set(slices);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVFieldOrder */
	public IntValuedEnum<AvcodecLibrary.AVFieldOrder > field_order() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVFieldOrder >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("field_order").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVFieldOrder.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVFieldOrder */
	public AvcodecLibrary field_order(IntValuedEnum<AvcodecLibrary.AVFieldOrder > field_order) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("field_order").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVFieldOrder.class)).set(field_order);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < samples per second */
	public int sample_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < samples per second */
	public AvcodecLibrary sample_rate(int sample_rate) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_rate").as(int.class).set(sample_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < number of audio channels */
	public int channels() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("channels").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < number of audio channels */
	public AvcodecLibrary channels(int channels) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("channels").as(int.class).set(channels);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * < sample format<br>
	 * C type : AVSampleFormat
	 */
	public IntValuedEnum<AVSampleFormat > sample_fmt() {
		try {
			return (IntValuedEnum<AVSampleFormat >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVSampleFormat.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * < sample format<br>
	 * C type : AVSampleFormat
	 */
	public AvcodecLibrary sample_fmt(IntValuedEnum<AVSampleFormat > sample_fmt) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("sample_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVSampleFormat.class)).set(sample_fmt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_size(int frame_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_size").as(int.class).set(frame_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_number() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_number").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_number(int frame_number) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_number").as(int.class).set(frame_number);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int block_align() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("block_align").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary block_align(int block_align) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("block_align").as(int.class).set(block_align);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int cutoff() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("cutoff").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary cutoff(int cutoff) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("cutoff").as(int.class).set(cutoff);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int request_channels() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_channels").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary request_channels(int request_channels) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_channels").as(int.class).set(request_channels);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public long channel_layout() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("channel_layout").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary channel_layout(long channel_layout) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("channel_layout").as(long.class).set(channel_layout);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public long request_channel_layout() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_channel_layout").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary request_channel_layout(long request_channel_layout) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_channel_layout").as(long.class).set(request_channel_layout);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVAudioServiceType */
	public IntValuedEnum<AvcodecLibrary.AVAudioServiceType > audio_service_type() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVAudioServiceType >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("audio_service_type").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVAudioServiceType.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVAudioServiceType */
	public AvcodecLibrary audio_service_type(IntValuedEnum<AvcodecLibrary.AVAudioServiceType > audio_service_type) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("audio_service_type").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVAudioServiceType.class)).set(audio_service_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVSampleFormat */
	public IntValuedEnum<AVSampleFormat > request_sample_fmt() {
		try {
			return (IntValuedEnum<AVSampleFormat >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_sample_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVSampleFormat.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVSampleFormat */
	public AvcodecLibrary request_sample_fmt(IntValuedEnum<AVSampleFormat > request_sample_fmt) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("request_sample_fmt").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AVSampleFormat.class)).set(request_sample_fmt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int refcounted_frames() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("refcounted_frames").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary refcounted_frames(int refcounted_frames) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("refcounted_frames").as(int.class).set(refcounted_frames);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < amount of qscale change between easy & hard scenes (0.0-1.0) */
	public float qcompress() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("qcompress").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < amount of qscale change between easy & hard scenes (0.0-1.0) */
	public AvcodecLibrary qcompress(float qcompress) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("qcompress").as(float.class).set(qcompress);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < amount of qscale smoothing over time (0.0-1.0) */
	public float qblur() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("qblur").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** < amount of qscale smoothing over time (0.0-1.0) */
	public AvcodecLibrary qblur(float qblur) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("qblur").as(float.class).set(qblur);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int qmin() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("qmin").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary qmin(int qmin) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("qmin").as(int.class).set(qmin);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int qmax() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("qmax").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary qmax(int qmax) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("qmax").as(int.class).set(qmax);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int max_qdiff() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_qdiff").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary max_qdiff(int max_qdiff) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_qdiff").as(int.class).set(max_qdiff);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_qsquish() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qsquish").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_qsquish(float rc_qsquish) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qsquish").as(float.class).set(rc_qsquish);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_qmod_amp() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qmod_amp").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_qmod_amp(float rc_qmod_amp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qmod_amp").as(float.class).set(rc_qmod_amp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_qmod_freq() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qmod_freq").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_qmod_freq(int rc_qmod_freq) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_qmod_freq").as(int.class).set(rc_qmod_freq);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_buffer_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_buffer_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_buffer_size(int rc_buffer_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_buffer_size").as(int.class).set(rc_buffer_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_override_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_override_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_override_count(int rc_override_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_override_count").as(int.class).set(rc_override_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Conversion Error : RcOverride* (failed to convert type to Java (undefined type)) */
	/** C type : const char* */
	public Pointer<Byte > rc_eq() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_eq").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : const char* */
	public AvcodecLibrary rc_eq(Pointer<Byte > rc_eq) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_eq").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(rc_eq);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_max_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_max_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_max_rate(int rc_max_rate) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_max_rate").as(int.class).set(rc_max_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_min_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_min_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_min_rate(int rc_min_rate) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_min_rate").as(int.class).set(rc_min_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_buffer_aggressivity() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_buffer_aggressivity").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_buffer_aggressivity(float rc_buffer_aggressivity) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_buffer_aggressivity").as(float.class).set(rc_buffer_aggressivity);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_initial_cplx() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_initial_cplx").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_initial_cplx(float rc_initial_cplx) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_initial_cplx").as(float.class).set(rc_initial_cplx);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_max_available_vbv_use() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_max_available_vbv_use").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_max_available_vbv_use(float rc_max_available_vbv_use) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_max_available_vbv_use").as(float.class).set(rc_max_available_vbv_use);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public float rc_min_vbv_overflow_use() {
		try {
			return (float)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_min_vbv_overflow_use").as(float.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_min_vbv_overflow_use(float rc_min_vbv_overflow_use) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_min_vbv_overflow_use").as(float.class).set(rc_min_vbv_overflow_use);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rc_initial_buffer_occupancy() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_initial_buffer_occupancy").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary rc_initial_buffer_occupancy(int rc_initial_buffer_occupancy) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rc_initial_buffer_occupancy").as(int.class).set(rc_initial_buffer_occupancy);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int coder_type() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("coder_type").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary coder_type(int coder_type) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("coder_type").as(int.class).set(coder_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int context_model() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("context_model").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary context_model(int context_model) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("context_model").as(int.class).set(context_model);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int lmin() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("lmin").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary lmin(int lmin) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("lmin").as(int.class).set(lmin);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int lmax() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("lmax").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary lmax(int lmax) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("lmax").as(int.class).set(lmax);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_skip_threshold() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_threshold").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_skip_threshold(int frame_skip_threshold) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_threshold").as(int.class).set(frame_skip_threshold);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_skip_factor() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_factor").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_skip_factor(int frame_skip_factor) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_factor").as(int.class).set(frame_skip_factor);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_skip_exp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_exp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_skip_exp(int frame_skip_exp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_exp").as(int.class).set(frame_skip_exp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_skip_cmp() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_cmp").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_skip_cmp(int frame_skip_cmp) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_skip_cmp").as(int.class).set(frame_skip_cmp);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int trellis() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("trellis").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary trellis(int trellis) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("trellis").as(int.class).set(trellis);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int min_prediction_order() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("min_prediction_order").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary min_prediction_order(int min_prediction_order) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("min_prediction_order").as(int.class).set(min_prediction_order);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int max_prediction_order() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_prediction_order").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary max_prediction_order(int max_prediction_order) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("max_prediction_order").as(int.class).set(max_prediction_order);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public long timecode_frame_start() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("timecode_frame_start").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary timecode_frame_start(long timecode_frame_start) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("timecode_frame_start").as(long.class).set(timecode_frame_start);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** The size of the RTP payload: the coder will */
	public int rtp_payload_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("rtp_payload_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** The size of the RTP payload: the coder will */
	public AvcodecLibrary rtp_payload_size(int rtp_payload_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("rtp_payload_size").as(int.class).set(rtp_payload_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int mv_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("mv_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary mv_bits(int mv_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("mv_bits").as(int.class).set(mv_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int header_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("header_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary header_bits(int header_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("header_bits").as(int.class).set(header_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int i_tex_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_tex_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary i_tex_bits(int i_tex_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_tex_bits").as(int.class).set(i_tex_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int p_tex_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_tex_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary p_tex_bits(int p_tex_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_tex_bits").as(int.class).set(p_tex_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int i_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary i_count(int i_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("i_count").as(int.class).set(i_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int p_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary p_count(int p_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("p_count").as(int.class).set(p_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int skip_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary skip_count(int skip_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_count").as(int.class).set(skip_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int misc_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("misc_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary misc_bits(int misc_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("misc_bits").as(int.class).set(misc_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int frame_bits() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_bits").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary frame_bits(int frame_bits) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("frame_bits").as(int.class).set(frame_bits);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public Pointer<Byte > stats_out() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("stats_out").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public AvcodecLibrary stats_out(Pointer<Byte > stats_out) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("stats_out").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(stats_out);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public Pointer<Byte > stats_in() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("stats_in").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public AvcodecLibrary stats_in(Pointer<Byte > stats_in) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("stats_in").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(stats_in);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int workaround_bugs() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("workaround_bugs").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary workaround_bugs(int workaround_bugs) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("workaround_bugs").as(int.class).set(workaround_bugs);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int strict_std_compliance() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("strict_std_compliance").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary strict_std_compliance(int strict_std_compliance) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("strict_std_compliance").as(int.class).set(strict_std_compliance);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int error_concealment() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("error_concealment").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary error_concealment(int error_concealment) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("error_concealment").as(int.class).set(error_concealment);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int debug() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("debug").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary debug(int debug) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("debug").as(int.class).set(debug);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int debug_mv() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("debug_mv").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary debug_mv(int debug_mv) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("debug_mv").as(int.class).set(debug_mv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int err_recognition() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("err_recognition").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary err_recognition(int err_recognition) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("err_recognition").as(int.class).set(err_recognition);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public long reordered_opaque() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("reordered_opaque").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary reordered_opaque(long reordered_opaque) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("reordered_opaque").as(long.class).set(reordered_opaque);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Conversion Error : AVHWAccel* (failed to convert type to Java (undefined type)) */
	/** C type : void* */
	public Pointer<? > hwaccel_context() {
		try {
			return (Pointer<? >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("hwaccel_context").as(DefaultParameterizedType.paramType(Pointer.class, null)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public AvcodecLibrary hwaccel_context(Pointer<? > hwaccel_context) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("hwaccel_context").as(DefaultParameterizedType.paramType(Pointer.class, null)).set(hwaccel_context);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint64_t[8] */
	@Array({8}) 
	public Pointer<Long > error() {
		try {
			return (Pointer<Long >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("error").as(DefaultParameterizedType.paramType(Pointer.class, Long.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int dct_algo() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("dct_algo").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary dct_algo(int dct_algo) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("dct_algo").as(int.class).set(dct_algo);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int idct_algo() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("idct_algo").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary idct_algo(int idct_algo) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("idct_algo").as(int.class).set(idct_algo);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bits_per_coded_sample() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("bits_per_coded_sample").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary bits_per_coded_sample(int bits_per_coded_sample) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("bits_per_coded_sample").as(int.class).set(bits_per_coded_sample);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int bits_per_raw_sample() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("bits_per_raw_sample").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary bits_per_raw_sample(int bits_per_raw_sample) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("bits_per_raw_sample").as(int.class).set(bits_per_raw_sample);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVFrame* */
	public Pointer<AVFrame > coded_frame() {
		try {
			return (Pointer<AVFrame >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_frame").as(DefaultParameterizedType.paramType(Pointer.class, AVFrame.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVFrame* */
	public AvcodecLibrary coded_frame(Pointer<AVFrame > coded_frame) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("coded_frame").as(DefaultParameterizedType.paramType(Pointer.class, AVFrame.class)).set(coded_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int thread_count() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_count").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary thread_count(int thread_count) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_count").as(int.class).set(thread_count);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int thread_type() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_type").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary thread_type(int thread_type) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_type").as(int.class).set(thread_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int active_thread_type() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("active_thread_type").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary active_thread_type(int active_thread_type) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("active_thread_type").as(int.class).set(active_thread_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int thread_safe_callbacks() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_safe_callbacks").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary thread_safe_callbacks(int thread_safe_callbacks) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_safe_callbacks").as(int.class).set(thread_safe_callbacks);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public Pointer<? > thread_opaque() {
		try {
			return (Pointer<? >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_opaque").as(DefaultParameterizedType.paramType(Pointer.class, null)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : void* */
	public AvcodecLibrary thread_opaque(Pointer<? > thread_opaque) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("thread_opaque").as(DefaultParameterizedType.paramType(Pointer.class, null)).set(thread_opaque);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int nsse_weight() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("nsse_weight").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary nsse_weight(int nsse_weight) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("nsse_weight").as(int.class).set(nsse_weight);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int profile() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("profile").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary profile(int profile) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("profile").as(int.class).set(profile);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int level() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("level").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary level(int level) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("level").as(int.class).set(level);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public IntValuedEnum<AvcodecLibrary.AVDiscard > skip_loop_filter() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVDiscard >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_loop_filter").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public AvcodecLibrary skip_loop_filter(IntValuedEnum<AvcodecLibrary.AVDiscard > skip_loop_filter) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_loop_filter").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).set(skip_loop_filter);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public IntValuedEnum<AvcodecLibrary.AVDiscard > skip_idct() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVDiscard >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_idct").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public AvcodecLibrary skip_idct(IntValuedEnum<AvcodecLibrary.AVDiscard > skip_idct) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_idct").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).set(skip_idct);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public IntValuedEnum<AvcodecLibrary.AVDiscard > skip_frame() {
		try {
			return (IntValuedEnum<AvcodecLibrary.AVDiscard >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_frame").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVDiscard */
	public AvcodecLibrary skip_frame(IntValuedEnum<AvcodecLibrary.AVDiscard > skip_frame) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_frame").as(DefaultParameterizedType.paramType(IntValuedEnum.class, AvcodecLibrary.AVDiscard.class)).set(skip_frame);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint8_t* */
	public Pointer<Byte > subtitle_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("subtitle_header").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : uint8_t* */
	public AvcodecLibrary subtitle_header(Pointer<Byte > subtitle_header) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("subtitle_header").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(subtitle_header);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int subtitle_header_size() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("subtitle_header_size").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary subtitle_header_size(int subtitle_header_size) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("subtitle_header_size").as(int.class).set(subtitle_header_size);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int error_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("error_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary error_rate(int error_rate) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("error_rate").as(int.class).set(error_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVPacket* */
	public Pointer<AVPacket > pkt() {
		try {
			return (Pointer<AVPacket >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pkt").as(DefaultParameterizedType.paramType(Pointer.class, AVPacket.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVPacket* */
	public AvcodecLibrary pkt(Pointer<AVPacket > pkt) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pkt").as(DefaultParameterizedType.paramType(Pointer.class, AVPacket.class)).set(pkt);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public long vbv_delay() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("vbv_delay").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary vbv_delay(long vbv_delay) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("vbv_delay").as(long.class).set(vbv_delay);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AVRational pkt_timebase() {
		try {
			return (AVRational)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pkt_timebase").as(AVRational.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : AVRational */
	public AvcodecLibrary pkt_timebase(AVRational pkt_timebase) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pkt_timebase").as(AVRational.class).set(pkt_timebase);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : const AVCodecDescriptor* */
	public Pointer<AVCodecDescriptor > codec_descriptor() {
		try {
			return (Pointer<AVCodecDescriptor >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_descriptor").as(DefaultParameterizedType.paramType(Pointer.class, AVCodecDescriptor.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : const AVCodecDescriptor* */
	public AvcodecLibrary codec_descriptor(Pointer<AVCodecDescriptor > codec_descriptor) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("codec_descriptor").as(DefaultParameterizedType.paramType(Pointer.class, AVCodecDescriptor.class)).set(codec_descriptor);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int lowres() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("lowres").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary lowres(int lowres) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("lowres").as(int.class).set(lowres);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Number of incorrect PTS values so far */
	public long pts_correction_num_faulty_pts() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_num_faulty_pts").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Number of incorrect PTS values so far */
	public AvcodecLibrary pts_correction_num_faulty_pts(long pts_correction_num_faulty_pts) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_num_faulty_pts").as(long.class).set(pts_correction_num_faulty_pts);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Number of incorrect DTS values so far */
	public long pts_correction_num_faulty_dts() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_num_faulty_dts").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Number of incorrect DTS values so far */
	public AvcodecLibrary pts_correction_num_faulty_dts(long pts_correction_num_faulty_dts) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_num_faulty_dts").as(long.class).set(pts_correction_num_faulty_dts);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** PTS of the last frame */
	public long pts_correction_last_pts() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_last_pts").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** PTS of the last frame */
	public AvcodecLibrary pts_correction_last_pts(long pts_correction_last_pts) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_last_pts").as(long.class).set(pts_correction_last_pts);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** DTS of the last frame */
	public long pts_correction_last_dts() {
		try {
			return (long)BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_last_dts").as(long.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** DTS of the last frame */
	public AvcodecLibrary pts_correction_last_dts(long pts_correction_last_dts) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("pts_correction_last_dts").as(long.class).set(pts_correction_last_dts);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public Pointer<Byte > sub_charenc() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avcodec").getSymbolPointer("sub_charenc").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** C type : char* */
	public AvcodecLibrary sub_charenc(Pointer<Byte > sub_charenc) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("sub_charenc").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(sub_charenc);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int sub_charenc_mode() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("sub_charenc_mode").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary sub_charenc_mode(int sub_charenc_mode) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("sub_charenc_mode").as(int.class).set(sub_charenc_mode);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int skip_alpha() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_alpha").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary skip_alpha(int skip_alpha) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("skip_alpha").as(int.class).set(skip_alpha);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int seek_preroll() {
		try {
			return (int)BridJ.getNativeLibrary("avcodec").getSymbolPointer("seek_preroll").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvcodecLibrary seek_preroll(int seek_preroll) {
		try {
			{
				BridJ.getNativeLibrary("avcodec").getSymbolPointer("seek_preroll").as(int.class).set(seek_preroll);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/** Undefined type */
	public static interface AVSubtitle {
		
	};
	/** Undefined type */
	public static interface AVCodecInternal {
		
	};
	/** Undefined type */
	public static interface AVCodecDefault {
		
	};
	/** Undefined type */
	public static interface AVHWAccel {
		
	};
	/** Undefined type */
	public static interface RcOverride {
		
	};
}
