package org.ffmpeg.avformat;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.ffmpeg.avcodec.AVPacket;
import org.ffmpeg.avcodec.AvcodecLibrary.AVCodecID;
import org.ffmpeg.avutil.AVClass;
/**
 * <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:46</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avformat") 
public abstract class AVOutputFormat extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : const char* */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : const char* */
	@Field(0) 
	public AVOutputFormat name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/** C type : const char* */
	@Field(1) 
	public Pointer<Byte > long_name() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : const char* */
	@Field(1) 
	public AVOutputFormat long_name(Pointer<Byte > long_name) {
		this.io.setPointerField(this, 1, long_name);
		return this;
	}
	/** C type : const char* */
	@Field(2) 
	public Pointer<Byte > mime_type() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : const char* */
	@Field(2) 
	public AVOutputFormat mime_type(Pointer<Byte > mime_type) {
		this.io.setPointerField(this, 2, mime_type);
		return this;
	}
	/**
	 * < comma-separated filename extensions<br>
	 * C type : const char*
	 */
	@Field(3) 
	public Pointer<Byte > extensions() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * < comma-separated filename extensions<br>
	 * C type : const char*
	 */
	@Field(3) 
	public AVOutputFormat extensions(Pointer<Byte > extensions) {
		this.io.setPointerField(this, 3, extensions);
		return this;
	}
	/**
	 * output support<br>
	 * < default audio codec<br>
	 * C type : AVCodecID
	 */
	@Field(4) 
	public IntValuedEnum<AVCodecID > audio_codec() {
		return this.io.getEnumField(this, 4);
	}
	/**
	 * output support<br>
	 * < default audio codec<br>
	 * C type : AVCodecID
	 */
	@Field(4) 
	public AVOutputFormat audio_codec(IntValuedEnum<AVCodecID > audio_codec) {
		this.io.setEnumField(this, 4, audio_codec);
		return this;
	}
	/**
	 * < default video codec<br>
	 * C type : AVCodecID
	 */
	@Field(5) 
	public IntValuedEnum<AVCodecID > video_codec() {
		return this.io.getEnumField(this, 5);
	}
	/**
	 * < default video codec<br>
	 * C type : AVCodecID
	 */
	@Field(5) 
	public AVOutputFormat video_codec(IntValuedEnum<AVCodecID > video_codec) {
		this.io.setEnumField(this, 5, video_codec);
		return this;
	}
	/**
	 * < default subtitle codec<br>
	 * C type : AVCodecID
	 */
	@Field(6) 
	public IntValuedEnum<AVCodecID > subtitle_codec() {
		return this.io.getEnumField(this, 6);
	}
	/**
	 * < default subtitle codec<br>
	 * C type : AVCodecID
	 */
	@Field(6) 
	public AVOutputFormat subtitle_codec(IntValuedEnum<AVCodecID > subtitle_codec) {
		this.io.setEnumField(this, 6, subtitle_codec);
		return this;
	}
	@Field(7) 
	public int flags() {
		return this.io.getIntField(this, 7);
	}
	@Field(7) 
	public AVOutputFormat flags(int flags) {
		this.io.setIntField(this, 7, flags);
		return this;
	}
	/** Conversion Error : AVCodecTag** (failed to convert type to Java (undefined type)) */
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	@Field(9) 
	public Pointer<AVClass > priv_class() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	@Field(9) 
	public AVOutputFormat priv_class(Pointer<AVClass > priv_class) {
		this.io.setPointerField(this, 9, priv_class);
		return this;
	}
	/** C type : AVOutputFormat* */
	@Field(10) 
	public Pointer<AVOutputFormat > next() {
		return this.io.getPointerField(this, 10);
	}
	/** C type : AVOutputFormat* */
	@Field(10) 
	public AVOutputFormat next(Pointer<AVOutputFormat > next) {
		this.io.setPointerField(this, 10, next);
		return this;
	}
	@Field(11) 
	public int priv_data_size() {
		return this.io.getIntField(this, 11);
	}
	@Field(11) 
	public AVOutputFormat priv_data_size(int priv_data_size) {
		this.io.setIntField(this, 11, priv_data_size);
		return this;
	}
	/** C type : write_header_callback* */
	@Field(12) 
	public Pointer<AVOutputFormat.write_header_callback > write_header() {
		return this.io.getPointerField(this, 12);
	}
	/** C type : write_header_callback* */
	@Field(12) 
	public AVOutputFormat write_header(Pointer<AVOutputFormat.write_header_callback > write_header) {
		this.io.setPointerField(this, 12, write_header);
		return this;
	}
	/** C type : write_packet_callback* */
	@Field(13) 
	public Pointer<AVOutputFormat.write_packet_callback > write_packet() {
		return this.io.getPointerField(this, 13);
	}
	/** C type : write_packet_callback* */
	@Field(13) 
	public AVOutputFormat write_packet(Pointer<AVOutputFormat.write_packet_callback > write_packet) {
		this.io.setPointerField(this, 13, write_packet);
		return this;
	}
	/** C type : write_trailer_callback* */
	@Field(14) 
	public Pointer<AVOutputFormat.write_trailer_callback > write_trailer() {
		return this.io.getPointerField(this, 14);
	}
	/** C type : write_trailer_callback* */
	@Field(14) 
	public AVOutputFormat write_trailer(Pointer<AVOutputFormat.write_trailer_callback > write_trailer) {
		this.io.setPointerField(this, 14, write_trailer);
		return this;
	}
	/** C type : interleave_packet_callback* */
	@Field(15) 
	public Pointer<AVOutputFormat.interleave_packet_callback > interleave_packet() {
		return this.io.getPointerField(this, 15);
	}
	/** C type : interleave_packet_callback* */
	@Field(15) 
	public AVOutputFormat interleave_packet(Pointer<AVOutputFormat.interleave_packet_callback > interleave_packet) {
		this.io.setPointerField(this, 15, interleave_packet);
		return this;
	}
	/** C type : query_codec_callback* */
	@Field(16) 
	public Pointer<AVOutputFormat.query_codec_callback > query_codec() {
		return this.io.getPointerField(this, 16);
	}
	/** C type : query_codec_callback* */
	@Field(16) 
	public AVOutputFormat query_codec(Pointer<AVOutputFormat.query_codec_callback > query_codec) {
		this.io.setPointerField(this, 16, query_codec);
		return this;
	}
	/** C type : get_output_timestamp_callback* */
	@Field(17) 
	public Pointer<AVOutputFormat.get_output_timestamp_callback > get_output_timestamp() {
		return this.io.getPointerField(this, 17);
	}
	/** C type : get_output_timestamp_callback* */
	@Field(17) 
	public AVOutputFormat get_output_timestamp(Pointer<AVOutputFormat.get_output_timestamp_callback > get_output_timestamp) {
		this.io.setPointerField(this, 17, get_output_timestamp);
		return this;
	}
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:38</i> */
	public static abstract class write_header_callback extends Callback<write_header_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:39</i> */
	public static abstract class write_packet_callback extends Callback<write_packet_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > pkt) {
			return apply(Pointer.getPeer(AVFormatContextPtr1), Pointer.getPeer(pkt));
		}
		public int apply(@Ptr long AVFormatContextPtr1, @Ptr long pkt) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class), Pointer.pointerToAddress(pkt, AVPacket.class));
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:40</i> */
	public static abstract class write_trailer_callback extends Callback<write_trailer_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1) {
			return apply(Pointer.getPeer(AVFormatContextPtr1));
		}
		public int apply(@Ptr long AVFormatContextPtr1) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class));
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:41</i> */
	public static abstract class interleave_packet_callback extends Callback<interleave_packet_callback > {
		public int apply(Pointer<AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > out, Pointer<AVPacket > in, int flush) {
			return apply(Pointer.getPeer(AVFormatContextPtr1), Pointer.getPeer(out), Pointer.getPeer(in), flush);
		}
		public int apply(@Ptr long AVFormatContextPtr1, @Ptr long out, @Ptr long in, int flush) {
			return apply(Pointer.pointerToAddress(AVFormatContextPtr1, AVFormatContext.class), Pointer.pointerToAddress(out, AVPacket.class), Pointer.pointerToAddress(in, AVPacket.class), flush);
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:44</i> */
	public static abstract class query_codec_callback extends Callback<query_codec_callback > {
		public int apply(IntValuedEnum<AVCodecID > id, int std_compliance) {
			return apply((int)id.value(), std_compliance);
		}
		public int apply(int id, int std_compliance) {
			return apply(FlagSet.fromValue(id, AVCodecID.class), std_compliance);
		}
	};
	/** <i>native declaration : /home/fschuett/prog/java/eclipse/ffmpeg/csrc/libavformat/avformat.h:45</i> */
	public static abstract class get_output_timestamp_callback extends Callback<get_output_timestamp_callback > {
		public void apply(Pointer<AVFormatContext > s, int stream, Pointer<Long > dts, Pointer<Long > wall) {
			apply(Pointer.getPeer(s), stream, Pointer.getPeer(dts), Pointer.getPeer(wall));
		}
		public void apply(@Ptr long s, int stream, @Ptr long dts, @Ptr long wall) {
			apply(Pointer.pointerToAddress(s, AVFormatContext.class), stream, Pointer.pointerToAddress(dts, Long.class), Pointer.pointerToAddress(wall, Long.class));
		}
	};
}
