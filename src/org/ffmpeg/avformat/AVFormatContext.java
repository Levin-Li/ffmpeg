package org.ffmpeg.avformat;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import org.ffmpeg.avformat.AvformatLibrary.av_format_control_message;
import org.ffmpeg.avutil.AVRational;
/**
 * <i>native declaration : libavformat/avformat.h:295</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVFormatContext extends Structure {
	/** C type : const AVClass* */
	public org.ffmpeg.avutil.AVClass.ByReference av_class;
	/** C type : AVInputFormat* */
	public org.ffmpeg.avformat.AVInputFormat.ByReference iformat;
	/** C type : AVOutputFormat* */
	public org.ffmpeg.avformat.AVOutputFormat.ByReference oformat;
	/** C type : void* */
	public Pointer priv_data;
	/** C type : AVIOContext* */
	public org.ffmpeg.avformat.AVIOContext.ByReference pb;
	/** < Format-specific flags, see AVFMTCTX_xx */
	public int ctx_flags;
	public int nb_streams;
	/** C type : AVStream** */
	public org.ffmpeg.avformat.AVStream.ByReference[] streams;
	/** C type : char[1024] */
	public byte[] filename = new byte[1024];
	public long start_time;
	public long duration;
	public int bit_rate;
	public int packet_size;
	public int max_delay;
	public int flags;
	public int probesize;
	public int max_analyze_duration;
	/** C type : const uint8_t* */
	public Pointer key;
	public int keylen;
	public int nb_programs;
	/** C type : AVProgram** */
	public org.ffmpeg.avformat.AVProgram.ByReference[] programs;
	/**
	 * @see org.ffmpeg.avcodec.AvcodecLibrary#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int video_codec_id;
	/**
	 * @see org.ffmpeg.avcodec.AvcodecLibrary#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int audio_codec_id;
	/**
	 * @see org.ffmpeg.avcodec.AvcodecLibrary#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int subtitle_codec_id;
	public int max_index_size;
	public int max_picture_buffer;
	public int nb_chapters;
	/** C type : AVChapter** */
	public org.ffmpeg.avformat.AVChapter.ByReference[] chapters;
	/** C type : AVDictionary* */
	public org.ffmpeg.avutil.AVDictionary.ByReference metadata;
	public long start_time_realtime;
	public int fps_probe_size;
	public int error_recognition;
	/** C type : AVIOInterruptCB */
	public AVIOInterruptCB interrupt_callback;
	public int debug;
	public long max_interleave_delta;
	public int ts_id;
	public int audio_preload;
	public int max_chunk_duration;
	public int max_chunk_size;
	public int use_wallclock_as_timestamps;
	public int avoid_negative_ts;
	public int avio_flags;
	/**
	 * @see AVDurationEstimationMethod<br>
	 * C type : AVDurationEstimationMethod
	 */
	public int duration_estimation_method;
	public int skip_initial_bytes;
	public int correct_ts_overflow;
	public int seek2any;
	public int flush_packets;
	public int probe_score;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference packet_buffer;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference packet_buffer_end;
	/** < offset of the first packet */
	public long data_offset;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference raw_packet_buffer;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference raw_packet_buffer_end;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference parse_queue;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat.AVPacketList.ByReference parse_queue_end;
	public int raw_packet_buffer_remaining_size;
	public long offset;
	/** C type : AVRational */
	public AVRational offset_timebase;
	/** C type : AVFormatInternal* */
	public org.ffmpeg.avformat.AVFormatInternal.ByReference internal;
	public int io_repositioned;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec.AVCodec.ByReference video_codec;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec.AVCodec.ByReference audio_codec;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec.AVCodec.ByReference subtitle_codec;
	public int metadata_header_padding;
	/** C type : void* */
	public Pointer opaque;
	/** C type : av_format_control_message */
	public av_format_control_message control_message_cb;
	public long output_ts_offset;
	public AVFormatContext() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("av_class", "iformat", "oformat", "priv_data", "pb", "ctx_flags", "nb_streams", "streams", "filename", "start_time", "duration", "bit_rate", "packet_size", "max_delay", "flags", "probesize", "max_analyze_duration", "key", "keylen", "nb_programs", "programs", "video_codec_id", "audio_codec_id", "subtitle_codec_id", "max_index_size", "max_picture_buffer", "nb_chapters", "chapters", "metadata", "start_time_realtime", "fps_probe_size", "error_recognition", "interrupt_callback", "debug", "max_interleave_delta", "ts_id", "audio_preload", "max_chunk_duration", "max_chunk_size", "use_wallclock_as_timestamps", "avoid_negative_ts", "avio_flags", "duration_estimation_method", "skip_initial_bytes", "correct_ts_overflow", "seek2any", "flush_packets", "probe_score", "packet_buffer", "packet_buffer_end", "data_offset", "raw_packet_buffer", "raw_packet_buffer_end", "parse_queue", "parse_queue_end", "raw_packet_buffer_remaining_size", "offset", "offset_timebase", "internal", "io_repositioned", "video_codec", "audio_codec", "subtitle_codec", "metadata_header_padding", "opaque", "control_message_cb", "output_ts_offset");
	}
	public AVFormatContext(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVFormatContext implements Structure.ByReference {
		
	};
	public static class ByValue extends AVFormatContext implements Structure.ByValue {
		
	};
}
