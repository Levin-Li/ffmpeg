package org.ffmpeg.avformat;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import org.ffmpeg.avcodec.AVCodec;
import org.ffmpeg.avcodec.AVPacket;
/**
 * JNA Wrapper for library <b>avformat</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface AvformatLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "avformat";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AvformatLibrary.JNA_LIBRARY_NAME);
	public static final AvformatLibrary INSTANCE = (AvformatLibrary)Native.loadLibrary(AvformatLibrary.JNA_LIBRARY_NAME, AvformatLibrary.class);
	/**
	 * <i>native declaration : libavformat/avformat.h:95</i><br>
	 * enum values
	 */
	public static interface AVStreamParseType {
		/** <i>native declaration : libavformat/avformat.h:87</i> */
		public static final int AVSTREAM_PARSE_NONE = 0;
		/**
		 * < full parsing and repack<br>
		 * <i>native declaration : libavformat/avformat.h:88</i>
		 */
		public static final int AVSTREAM_PARSE_FULL = 1;
		/**
		 * < Only parse headers, do not repack.<br>
		 * <i>native declaration : libavformat/avformat.h:89</i>
		 */
		public static final int AVSTREAM_PARSE_HEADERS = 2;
		/**
		 * < full parsing and interpolation of timestamps for frames not starting on a packet boundary<br>
		 * <i>native declaration : libavformat/avformat.h:90</i>
		 */
		public static final int AVSTREAM_PARSE_TIMESTAMPS = 3;
		/**
		 * < full parsing and repack of the first frame only, only implemented for H.264 currently<br>
		 * <i>native declaration : libavformat/avformat.h:91</i>
		 */
		public static final int AVSTREAM_PARSE_FULL_ONCE = 4;
		/**
		 * < full parsing and repack with timestamp and position generation by parser for raw<br>
		 * this assumes that each packet in the file contains no demuxer level headers and<br>
		 * just codec level data, otherwise position generation would fail<br>
		 * <i>native declaration : libavformat/avformat.h:94</i>
		 */
		public static final int AVSTREAM_PARSE_FULL_RAW = ((0) | (('R') << 8) | (('A') << 16) | (('W') << 24));
	};
	/**
	 * <i>native declaration : libavformat/avformat.h:215</i><br>
	 * enum values
	 */
	public static interface AVDurationEstimationMethod {
		/**
		 * < Duration accurately estimated from PTSes<br>
		 * <i>native declaration : libavformat/avformat.h:210</i>
		 */
		public static final int AVFMT_DURATION_FROM_PTS = 0;
		/**
		 * < Duration estimated from a stream with a known duration<br>
		 * <i>native declaration : libavformat/avformat.h:212</i>
		 */
		public static final int AVFMT_DURATION_FROM_STREAM = 1;
		/**
		 * < Duration estimated from bitrate (less accurate)<br>
		 * <i>native declaration : libavformat/avformat.h:214</i>
		 */
		public static final int AVFMT_DURATION_FROM_BITRATE = 2;
	};
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_DIRECT = (int)0x8000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_MP4A_LATM = (int)0x8000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_REFERENCE_DTS = (boolean)(55 < 56);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_SET_PTS_INFO = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_FRAME = (int)8;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_RETRY = (int)(100 / 4);
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_WRITE = (int)2;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOFILE = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int RAW_PACKET_BUFFER_SIZE = (int)2500000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_READ_PACKET = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_GENERIC_INDEX = (int)0x0100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_ALLOW_FLUSH = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_BACKWARD = (int)1;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_ASS_SSA = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NONBLOCK = (int)0x0004;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_DISCARD_CORRUPT = (int)0x0100;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MICRO = (int)100;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_FORMAT_PARAMETERS = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_PRIV_OPT = (int)0x20000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOSTREAMS = (int)0x1000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_ANY = (int)4;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int MAX_STD_TIMEBASES = (int)(60 * 12 + 6);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AV_PROGRAM_RUNNING = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVSEEK_FLAG_BYTE = (int)2;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_CUSTOM_IO = (int)0x0080;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOGENSEARCH = (int)0x4000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_VARIABLE_FPS = (int)0x0400;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_KEEP_SIDE_DATA = (int)0x40000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_INT = (int)(55 << 16 | 33 << 8 | 100);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOFILLIN = (int)0x0010;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final String LIBAVFORMAT_IDENT = (String)"Lavf55.33.100";
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_IGNIDX = (int)0x0002;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MAJOR = (int)55;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int MAX_PROBE_PACKETS = (int)2500;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NO_BYTE_SEEK = (int)0x8000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NEEDNUMBER = (int)0x0002;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_READ = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_GENPTS = (int)0x0001;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int FF_API_R_FRAME_RATE = (int)1;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_NEGATIVE = (int)0x40000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_SORT_DTS = (int)0x10000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVINDEX_KEYFRAME = (int)0x0001;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOBUFFER = (int)0x0040;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_SEEK_TO_PTS = (int)0x4000000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_STREAM_RETRY = (int)(100 / 4 - 1);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_SHOW_IDS = (int)0x0008;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_DISCONT = (int)0x0200;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_NOPARSE = (int)0x0020;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_MAX = (int)100;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int FF_FDEBUG_TS = (int)0x0001;
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_READ_WRITE = (int)(1 | 2);
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MINOR = (int)33;
	/**
	 * define<br>
	 * Conversion Error : 55.33.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ./libavformat/version.h:0</i><br>
	 * 55.33.
	 */
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_IGNDTS = (int)0x0008;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_PADDING_SIZE = (int)32;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOTIMESTAMPS = (int)0x0080;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_NEW_STREAM = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NOBINSEARCH = (int)0x2000;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_ALLOC_OUTPUT_CONTEXT = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_FLAG_FLUSH_PACKETS = (int)0x0200;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final int LIBAVFORMAT_BUILD = (int)(55 << 16 | 33 << 8 | 100);
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_NODIMENSIONS = (int)0x0800;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVPROBE_SCORE_EXTENSION = (int)50;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int MAX_REORDER_DELAY = (int)16;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_RAWPICTURE = (int)0x0020;
	/** <i>native declaration : ./libavformat/version.h</i> */
	public static final boolean FF_API_CLOSE_INPUT_FILE = (boolean)(55 < 56);
	/** <i>native declaration : libavformat/avio.h</i> */
	public static final int AVIO_FLAG_NONBLOCK = (int)8;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_TS_NONSTRICT = (int)0x20000;
	/** <i>native declaration : libavformat/avformat.h</i> */
	public static final int AVFMT_GLOBALHEADER = (int)0x0040;
	/** <i>native declaration : libavformat/avio.h:53</i> */
	public interface avio_alloc_context_read_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat/avio.h:54</i> */
	public interface avio_alloc_context_write_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat/avio.h:55</i> */
	public interface avio_alloc_context_seek_callback extends Callback {
		long apply(Pointer opaque, long offset, int whence);
	};
	/**
	 * Original signature : <code>AVIOContext* avio_alloc_context(unsigned char*, int, int, void*, avio_alloc_context_read_packet_callback*, avio_alloc_context_write_packet_callback*, avio_alloc_context_seek_callback*)</code><br>
	 * <i>native declaration : libavformat/avio.h:44</i><br>
	 * @deprecated use the safer methods {@link #avio_alloc_context(java.nio.ByteBuffer, int, int, com.sun.jna.Pointer, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_read_packet_callback, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_write_packet_callback, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_seek_callback)} and {@link #avio_alloc_context(com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_read_packet_callback, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_write_packet_callback, org.ffmpeg.avformat.AvformatLibrary.avio_alloc_context_seek_callback)} instead
	 */
	@Deprecated 
	AVIOContext avio_alloc_context(Pointer buffer, int buffer_size, int write_flag, Pointer opaque, AvformatLibrary.avio_alloc_context_read_packet_callback read_packet, AvformatLibrary.avio_alloc_context_write_packet_callback write_packet, AvformatLibrary.avio_alloc_context_seek_callback seek);
	/**
	 * Original signature : <code>AVIOContext* avio_alloc_context(unsigned char*, int, int, void*, avio_alloc_context_read_packet_callback*, avio_alloc_context_write_packet_callback*, avio_alloc_context_seek_callback*)</code><br>
	 * <i>native declaration : libavformat/avio.h:44</i>
	 */
	AVIOContext avio_alloc_context(ByteBuffer buffer, int buffer_size, int write_flag, Pointer opaque, AvformatLibrary.avio_alloc_context_read_packet_callback read_packet, AvformatLibrary.avio_alloc_context_write_packet_callback write_packet, AvformatLibrary.avio_alloc_context_seek_callback seek);
	/**
	 * Original signature : <code>void avio_flush(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:46</i>
	 */
	void avio_flush(AVIOContext s);
	/**
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:48</i><br>
	 * @deprecated use the safer methods {@link #avio_open(org.ffmpeg.avformat.AVIOContext.ByReference[], java.lang.String, int)} and {@link #avio_open(org.ffmpeg.avformat.AVIOContext.ByReference[], com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int avio_open(PointerByReference s, Pointer url, int flags);
	/**
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:48</i>
	 */
	int avio_open(AVIOContext.ByReference s[], String url, int flags);
	/**
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avio.h:48</i>
	 */
	int avio_open(AVIOContext.ByReference s[], Pointer url, int flags);
	/**
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avio.h:50</i><br>
	 * @deprecated use the safer methods {@link #avio_open2(org.ffmpeg.avformat.AVIOContext.ByReference[], java.lang.String, int, org.ffmpeg.avformat.AVIOInterruptCB, org.ffmpeg.avutil.AVDictionary.ByReference[])} and {@link #avio_open2(org.ffmpeg.avformat.AVIOContext.ByReference[], com.sun.jna.Pointer, int, org.ffmpeg.avformat.AVIOInterruptCB, org.ffmpeg.avutil.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avio_open2(PointerByReference s, Pointer url, int flags, AVIOInterruptCB int_cb, PointerByReference options);
	/**
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avio.h:50</i>
	 */
	int avio_open2(AVIOContext.ByReference s[], String url, int flags, AVIOInterruptCB int_cb, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avio.h:50</i>
	 */
	int avio_open2(AVIOContext.ByReference s[], Pointer url, int flags, AVIOInterruptCB int_cb, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int avio_close(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat/avio.h:52</i>
	 */
	int avio_close(AVIOContext s);
	/**
	 * Original signature : <code>int avformat_version()</code><br>
	 * <i>native declaration : libavformat/avformat.h:301</i>
	 */
	int avformat_version();
	/**
	 * Original signature : <code>void av_register_all()</code><br>
	 * <i>native declaration : libavformat/avformat.h:303</i>
	 */
	void av_register_all();
	/**
	 * Original signature : <code>AVFormatContext* avformat_alloc_context()</code><br>
	 * <i>native declaration : libavformat/avformat.h:305</i>
	 */
	AVFormatContext avformat_alloc_context();
	/**
	 * Original signature : <code>void avformat_free_context(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:307</i>
	 */
	void avformat_free_context(AVFormatContext s);
	/**
	 * Original signature : <code>AVStream* avformat_new_stream(AVFormatContext*, const AVCodec*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:309</i>
	 */
	AVStream avformat_new_stream(AVFormatContext s, AVCodec c);
	/**
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:311</i><br>
	 * @deprecated use the safer methods {@link #avformat_alloc_output_context2(org.ffmpeg.avformat.AVFormatContext.ByReference[], org.ffmpeg.avformat.AVOutputFormat, java.lang.String, java.lang.String)} and {@link #avformat_alloc_output_context2(org.ffmpeg.avformat.AVFormatContext.ByReference[], org.ffmpeg.avformat.AVOutputFormat, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int avformat_alloc_output_context2(PointerByReference ctx, AVOutputFormat oformat, Pointer format_name, Pointer filename);
	/**
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:311</i>
	 */
	int avformat_alloc_output_context2(AVFormatContext.ByReference ctx[], AVOutputFormat oformat, String format_name, String filename);
	/**
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:311</i>
	 */
	int avformat_alloc_output_context2(AVFormatContext.ByReference ctx[], AVOutputFormat oformat, Pointer format_name, Pointer filename);
	/**
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:313</i><br>
	 * @deprecated use the safer methods {@link #avformat_open_input(org.ffmpeg.avformat.AVFormatContext.ByReference[], java.lang.String, org.ffmpeg.avformat.AVInputFormat, org.ffmpeg.avutil.AVDictionary.ByReference[])} and {@link #avformat_open_input(org.ffmpeg.avformat.AVFormatContext.ByReference[], com.sun.jna.Pointer, org.ffmpeg.avformat.AVInputFormat, org.ffmpeg.avutil.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_open_input(PointerByReference ps, Pointer filename, AVInputFormat fmt, PointerByReference options);
	/**
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:313</i>
	 */
	int avformat_open_input(AVFormatContext.ByReference ps[], String filename, AVInputFormat fmt, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:313</i>
	 */
	int avformat_open_input(AVFormatContext.ByReference ps[], Pointer filename, AVInputFormat fmt, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int avformat_find_stream_info(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:315</i><br>
	 * @deprecated use the safer method {@link #avformat_find_stream_info(org.ffmpeg.avformat.AVFormatContext, org.ffmpeg.avutil.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_find_stream_info(AVFormatContext ic, PointerByReference options);
	/**
	 * Original signature : <code>int avformat_find_stream_info(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:315</i>
	 */
	int avformat_find_stream_info(AVFormatContext ic, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int av_find_best_stream(AVFormatContext*, AVMediaType, int, int, AVCodec**, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:317</i><br>
	 * @deprecated use the safer method {@link #av_find_best_stream(org.ffmpeg.avformat.AVFormatContext, int, int, int, org.ffmpeg.avcodec.AVCodec.ByReference[], int)} instead
	 */
	@Deprecated 
	int av_find_best_stream(AVFormatContext ic, int type, int wanted_stream_nb, int related_stream, PointerByReference decoder_ret, int flags);
	/**
	 * Original signature : <code>int av_find_best_stream(AVFormatContext*, AVMediaType, int, int, AVCodec**, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:317</i>
	 */
	int av_find_best_stream(AVFormatContext ic, int type, int wanted_stream_nb, int related_stream, AVCodec.ByReference decoder_ret[], int flags);
	/**
	 * Original signature : <code>int av_read_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:319</i>
	 */
	int av_read_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Original signature : <code>int av_seek_frame(AVFormatContext*, int, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:321</i>
	 */
	int av_seek_frame(AVFormatContext s, int stream_index, long timestamp, int flags);
	/**
	 * Original signature : <code>int avformat_seek_file(AVFormatContext*, int, int64_t, int64_t, int64_t, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:323</i>
	 */
	int avformat_seek_file(AVFormatContext s, int stream_index, long min_ts, long ts, long max_ts, int flags);
	/**
	 * Original signature : <code>void avformat_close_input(AVFormatContext**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:325</i><br>
	 * @deprecated use the safer method {@link #avformat_close_input(org.ffmpeg.avformat.AVFormatContext.ByReference[])} instead
	 */
	@Deprecated 
	void avformat_close_input(PointerByReference s);
	/**
	 * Original signature : <code>void avformat_close_input(AVFormatContext**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:325</i>
	 */
	void avformat_close_input(AVFormatContext.ByReference s[]);
	/**
	 * Original signature : <code>int avformat_write_header(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:327</i><br>
	 * @deprecated use the safer method {@link #avformat_write_header(org.ffmpeg.avformat.AVFormatContext, org.ffmpeg.avutil.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_write_header(AVFormatContext s, PointerByReference options);
	/**
	 * Original signature : <code>int avformat_write_header(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat/avformat.h:327</i>
	 */
	int avformat_write_header(AVFormatContext s, org.ffmpeg.avutil.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int av_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:329</i>
	 */
	int av_write_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Original signature : <code>int av_interleaved_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:331</i>
	 */
	int av_interleaved_write_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Original signature : <code>int av_write_trailer(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:333</i>
	 */
	int av_write_trailer(AVFormatContext s);
	/**
	 * Original signature : <code>AVOutputFormat* av_guess_format(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:335</i><br>
	 * @deprecated use the safer methods {@link #av_guess_format(java.lang.String, java.lang.String, java.lang.String)} and {@link #av_guess_format(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AVOutputFormat av_guess_format(Pointer short_name, Pointer filename, Pointer mime_type);
	/**
	 * Original signature : <code>AVOutputFormat* av_guess_format(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat/avformat.h:335</i>
	 */
	AVOutputFormat av_guess_format(String short_name, String filename, String mime_type);
	/**
	 * Original signature : <code>AVCodecID av_guess_codec(AVOutputFormat*, const char*, const char*, const char*, AVMediaType)</code><br>
	 * <i>native declaration : libavformat/avformat.h:337</i><br>
	 * @deprecated use the safer methods {@link #av_guess_codec(org.ffmpeg.avformat.AVOutputFormat, java.lang.String, java.lang.String, java.lang.String, int)} and {@link #av_guess_codec(org.ffmpeg.avformat.AVOutputFormat, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int av_guess_codec(AVOutputFormat fmt, Pointer short_name, Pointer filename, Pointer mime_type, int type);
	/**
	 * Original signature : <code>AVCodecID av_guess_codec(AVOutputFormat*, const char*, const char*, const char*, AVMediaType)</code><br>
	 * <i>native declaration : libavformat/avformat.h:337</i>
	 */
	int av_guess_codec(AVOutputFormat fmt, String short_name, String filename, String mime_type, int type);
	/**
	 * Original signature : <code>void av_dump_format(AVFormatContext*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:339</i><br>
	 * @deprecated use the safer methods {@link #av_dump_format(org.ffmpeg.avformat.AVFormatContext, int, java.lang.String, int)} and {@link #av_dump_format(org.ffmpeg.avformat.AVFormatContext, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void av_dump_format(AVFormatContext ic, int index, Pointer url, int is_output);
	/**
	 * Original signature : <code>void av_dump_format(AVFormatContext*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat/avformat.h:339</i>
	 */
	void av_dump_format(AVFormatContext ic, int index, String url, int is_output);
	public static class AVCodecTag extends PointerType {
		public AVCodecTag(Pointer address) {
			super(address);
		}
		public AVCodecTag() {
			super();
		}
	};
	public static class AVDeviceInfoList extends PointerType {
		public AVDeviceInfoList(Pointer address) {
			super(address);
		}
		public AVDeviceInfoList() {
			super();
		}
	};
	public static class av_format_control_message extends PointerType {
		public av_format_control_message(Pointer address) {
			super(address);
		}
		public av_format_control_message() {
			super();
		}
	};
}
