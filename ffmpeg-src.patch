diff -pruN generated/org/ffmpeg/avcodec/AVCodecContext.java src/org/ffmpeg/avcodec/AVCodecContext.java
--- generated/org/ffmpeg/avcodec/AVCodecContext.java	2014-11-29 21:30:36.261864757 +0100
+++ src/org/ffmpeg/avcodec/AVCodecContext.java	2014-11-30 02:05:43.835240586 +0100
@@ -8,6 +8,7 @@ import org.bridj.ann.Array;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
 import org.bridj.ann.Ptr;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avcodec.AvcodecLibrary.AVAudioServiceType;
 import org.ffmpeg.avcodec.AvcodecLibrary.AVCodecID;
 import org.ffmpeg.avcodec.AvcodecLibrary.AVDiscard;
@@ -23,6 +24,7 @@ import org.ffmpeg.avutil.AvutilLibrary.A
 import org.ffmpeg.avutil.AvutilLibrary.AVMediaType;
 import org.ffmpeg.avutil.AvutilLibrary.AVPixelFormat;
 import org.ffmpeg.avutil.AvutilLibrary.AVSampleFormat;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : ./libavcodec/avcodec.h:343</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -2052,9 +2054,11 @@ public class AVCodecContext extends Stru
 			return apply(Pointer.pointerToAddress(c, AVCodecContext.class), Pointer.pointerToAddress(func, AVCodecContext.execute2_callback_func_callback.class), Pointer.pointerToAddress(arg2), Pointer.pointerToAddress(ret, Integer.class), count);
 		}
 	};
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVCodecContext() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVCodecContext(Pointer pointer) {
 		super(pointer);
 	}
diff -pruN generated/org/ffmpeg/avcodec/AvcodecLibrary.java src/org/ffmpeg/avcodec/AvcodecLibrary.java
--- generated/org/ffmpeg/avcodec/AvcodecLibrary.java	2014-11-29 21:30:36.897863326 +0100
+++ src/org/ffmpeg/avcodec/AvcodecLibrary.java	2014-11-29 21:30:49.867834141 +0100
@@ -1695,11 +1695,11 @@ public class AvcodecLibrary {
 	 * Original signature : <code>AVFrame* avcodec_alloc_frame()</code><br>
 	 * <i>native declaration : ./libavcodec/avcodec.h:393</i>
 	 */
-	public static Pointer<AVFrame > avcodec_alloc_frame() {
-		return Pointer.pointerToAddress(avcodec_alloc_frame$2(), AVFrame.class);
+	public static Pointer<AVFrame > alloc_frame() {
+		return Pointer.pointerToAddress(avcodec_alloc_frame(), AVFrame.class);
 	}
 	@Ptr 
-	protected native static long avcodec_alloc_frame$2();
+	protected native static long avcodec_alloc_frame();
 	/**
 	 * Initialize the AVCodecContext to use the given AVCodec. Prior to using this<br>
 	 * function the context has to be allocated with avcodec_alloc_context3().<br>
diff -pruN generated/org/ffmpeg/avcodec/AVPacket.java src/org/ffmpeg/avcodec/AVPacket.java
--- generated/org/ffmpeg/avcodec/AVPacket.java	2014-11-29 21:30:35.224867091 +0100
+++ src/org/ffmpeg/avcodec/AVPacket.java	2014-11-30 02:02:30.380784790 +0100
@@ -1,10 +1,16 @@
 package org.ffmpeg.avcodec;
+import java.util.List;
+
 import org.bridj.BridJ;
 import org.bridj.Pointer;
+import org.bridj.StructFieldDescription;
 import org.bridj.StructObject;
+import org.bridj.ann.Alignment;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avutil.AVBufferRef;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : ./libavcodec/avcodec.h:77</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -27,6 +33,7 @@ public class AVPacket extends StructObje
 		this.io.setPointerField(this, 0, buf);
 		return this;
 	}
+	@Alignment(4)
 	@Field(1) 
 	public long pts() {
 		return this.io.getLongField(this, 1);
@@ -36,6 +43,7 @@ public class AVPacket extends StructObje
 		this.io.setLongField(this, 1, pts);
 		return this;
 	}
+	@Alignment(4)
 	@Field(2) 
 	public long dts() {
 		return this.io.getLongField(this, 2);
@@ -154,10 +162,15 @@ public class AVPacket extends StructObje
 		this.io.setLongField(this, 13, convergence_duration);
 		return this;
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVPacket() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVPacket(Pointer pointer) {
 		super(pointer);
 	}
+	public List<StructFieldDescription> getDescriptions() {
+		return this.io.desc.getAggregatedFields();
+	}
 }
diff -pruN generated/org/ffmpeg/avcodec/AVPacketSideData.java src/org/ffmpeg/avcodec/AVPacketSideData.java
--- generated/org/ffmpeg/avcodec/AVPacketSideData.java	2014-11-29 21:30:35.204867136 +0100
+++ src/org/ffmpeg/avcodec/AVPacketSideData.java	2014-11-30 02:06:20.440138464 +0100
@@ -5,7 +5,9 @@ import org.bridj.Pointer;
 import org.bridj.StructObject;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avcodec.AvcodecLibrary.AVPacketSideDataType;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : ./libavcodec/avcodec.h:60</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -48,9 +50,11 @@ public class AVPacketSideData extends St
 		this.io.setEnumField(this, 2, type);
 		return this;
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVPacketSideData() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVPacketSideData(Pointer pointer) {
 		super(pointer);
 	}
diff -pruN generated/org/ffmpeg/avformat/AVFormatContext.java src/org/ffmpeg/avformat/AVFormatContext.java
--- generated/org/ffmpeg/avformat/AVFormatContext.java	2014-11-29 21:30:37.178862694 +0100
+++ src/org/ffmpeg/avformat/AVFormatContext.java	2014-11-30 02:07:10.206001367 +0100
@@ -6,6 +6,7 @@ import org.bridj.StructObject;
 import org.bridj.ann.Array;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avcodec.AVCodec;
 import org.ffmpeg.avcodec.AvcodecLibrary.AVCodecID;
 import org.ffmpeg.avformat.AvformatLibrary.AVDurationEstimationMethod;
@@ -13,6 +14,7 @@ import org.ffmpeg.avformat.AvformatLibra
 import org.ffmpeg.avutil.AVClass;
 import org.ffmpeg.avutil.AVDictionary;
 import org.ffmpeg.avutil.AVRational;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : libavformat/avformat.h:682</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -1352,9 +1354,11 @@ public class AVFormatContext extends Str
 		this.io.setLongField(this, 69, max_analyze_duration2);
 		return this;
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVFormatContext() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVFormatContext(Pointer pointer) {
 		super(pointer);
 	}
diff -pruN generated/org/ffmpeg/avformat/AvformatLibrary.java src/org/ffmpeg/avformat/AvformatLibrary.java
--- generated/org/ffmpeg/avformat/AvformatLibrary.java	2014-11-29 21:30:37.543861873 +0100
+++ src/org/ffmpeg/avformat/AvformatLibrary.java	2014-11-29 21:30:49.868834139 +0100
@@ -351,11 +351,11 @@ public class AvformatLibrary {
 	 * Original signature : <code>AVFormatContext* avformat_alloc_context()</code><br>
 	 * <i>native declaration : libavformat/avformat.h:706</i>
 	 */
-	public static Pointer<AVFormatContext > avformat_alloc_context() {
-		return Pointer.pointerToAddress(avformat_alloc_context$2(), AVFormatContext.class);
+	public static Pointer<AVFormatContext > alloc_context() {
+		return Pointer.pointerToAddress(avformat_alloc_context(), AVFormatContext.class);
 	}
 	@Ptr 
-	protected native static long avformat_alloc_context$2();
+	protected native static long avformat_alloc_context();
 	/**
 	 * Free an AVFormatContext and all its streams.<br>
 	 * @param s context to free<br>
diff -pruN generated/org/ffmpeg/avformat/AVStream.java src/org/ffmpeg/avformat/AVStream.java
--- generated/org/ffmpeg/avformat/AVStream.java	2014-11-29 21:30:37.049862984 +0100
+++ src/org/ffmpeg/avformat/AVStream.java	2014-11-30 02:08:10.059838896 +0100
@@ -6,6 +6,7 @@ import org.bridj.StructObject;
 import org.bridj.ann.Array;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avcodec.AVCodecContext;
 import org.ffmpeg.avcodec.AVCodecParserContext;
 import org.ffmpeg.avcodec.AVPacket;
@@ -14,6 +15,7 @@ import org.ffmpeg.avcodec.AvcodecLibrary
 import org.ffmpeg.avformat.AvformatLibrary.AVStreamParseType;
 import org.ffmpeg.avutil.AVDictionary;
 import org.ffmpeg.avutil.AVRational;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : libavformat/avformat.h:249</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -926,9 +928,11 @@ public class AVStream extends StructObje
 			super(pointer);
 		}
 	};
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVStream() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVStream(Pointer pointer) {
 		super(pointer);
 	}
diff -pruN generated/org/ffmpeg/avutil/AVFrame.java src/org/ffmpeg/avutil/AVFrame.java
--- generated/org/ffmpeg/avutil/AVFrame.java	2014-11-29 21:30:34.874867879 +0100
+++ src/org/ffmpeg/avutil/AVFrame.java	2014-11-30 03:22:04.891063691 +0100
@@ -1,11 +1,16 @@
 package org.ffmpeg.avutil;
+import java.util.List;
+
 import org.bridj.BridJ;
 import org.bridj.IntValuedEnum;
 import org.bridj.Pointer;
+import org.bridj.StructFieldDescription;
 import org.bridj.StructObject;
+import org.bridj.ann.Alignment;
 import org.bridj.ann.Array;
 import org.bridj.ann.Field;
 import org.bridj.ann.Library;
+import org.bridj.ann.Struct;
 import org.ffmpeg.avcodec.AVCodecContext;
 import org.ffmpeg.avcodec.AVPanScan;
 import org.ffmpeg.avutil.AvutilLibrary.AVChromaLocation;
@@ -14,6 +19,7 @@ import org.ffmpeg.avutil.AvutilLibrary.A
 import org.ffmpeg.avutil.AvutilLibrary.AVColorSpace;
 import org.ffmpeg.avutil.AvutilLibrary.AVColorTransferCharacteristic;
 import org.ffmpeg.avutil.AvutilLibrary.AVPictureType;
+import org.ffmpeg.util.AlignmentCustomizer;
 /**
  * <i>native declaration : libavutil/frame.h:325</i><br>
  * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
@@ -194,22 +200,26 @@ public class AVFrame extends StructObjec
 		return this;
 	}
 	/** Presentation timestamp in time_base units (time when frame should be shown to user). */
+	@Alignment(4)
 	@Field(11) 
 	public long pts() {
 		return this.io.getLongField(this, 11);
 	}
 	/** Presentation timestamp in time_base units (time when frame should be shown to user). */
 	@Field(11) 
+	@Alignment(4)
 	public AVFrame pts(long pts) {
 		this.io.setLongField(this, 11, pts);
 		return this;
 	}
 	/** PTS copied from the AVPacket that was decoded to produce this frame. */
+	@Alignment(4)
 	@Field(12) 
 	public long pkt_pts() {
 		return this.io.getLongField(this, 12);
 	}
 	/** PTS copied from the AVPacket that was decoded to produce this frame. */
+	@Alignment(4)
 	@Field(12) 
 	public AVFrame pkt_pts(long pkt_pts) {
 		this.io.setLongField(this, 12, pkt_pts);
@@ -220,6 +230,7 @@ public class AVFrame extends StructObjec
 	 * This is also the Presentation time of this AVFrame calculated from<br>
 	 * only AVPacket.dts values without pts values.
 	 */
+	@Alignment(4)
 	@Field(13) 
 	public long pkt_dts() {
 		return this.io.getLongField(this, 13);
@@ -229,6 +240,7 @@ public class AVFrame extends StructObjec
 	 * This is also the Presentation time of this AVFrame calculated from<br>
 	 * only AVPacket.dts values without pts values.
 	 */
+	@Alignment(4)
 	@Field(13) 
 	public AVFrame pkt_dts(long pkt_dts) {
 		this.io.setLongField(this, 13, pkt_dts);
@@ -514,6 +526,7 @@ public class AVFrame extends StructObjec
 	 * to exactly one of the values provided by the user through AVCodecContext.reordered_opaque<br>
 	 * @deprecated in favor of pkt_pts
 	 */
+	@Alignment(4)
 	@Field(35) 
 	public long reordered_opaque() {
 		return this.io.getLongField(this, 35);
@@ -527,6 +540,7 @@ public class AVFrame extends StructObjec
 	 * to exactly one of the values provided by the user through AVCodecContext.reordered_opaque<br>
 	 * @deprecated in favor of pkt_pts
 	 */
+	@Alignment(4)
 	@Field(35) 
 	public AVFrame reordered_opaque(long reordered_opaque) {
 		this.io.setLongField(this, 35, reordered_opaque);
@@ -969,10 +983,16 @@ public class AVFrame extends StructObjec
 		this.io.setPointerField(this, 60, qp_table_buf);
 		return this;
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVFrame() {
 		super();
 	}
+	@Struct(customizer=AlignmentCustomizer.class)
 	public AVFrame(Pointer pointer) {
 		super(pointer);
 	}
+	
+	public List<StructFieldDescription> getDescriptions() {
+		return this.io.desc.getAggregatedFields();
+	}
 }
diff -pruN generated/org/ffmpeg/avutil/AVUtil.java src/org/ffmpeg/avutil/AVUtil.java
--- generated/org/ffmpeg/avutil/AVUtil.java	1970-01-01 01:00:00.000000000 +0100
+++ src/org/ffmpeg/avutil/AVUtil.java	2014-11-29 21:30:49.869834137 +0100
@@ -0,0 +1,44 @@
+package org.ffmpeg.avutil;
+
+public class AVUtil {
+	public static final long AV_NOPTS_VALUE = Long.MIN_VALUE;
+
+	/** Inline-Funktion rational.h */
+	public static double av_q2d(AVRational a) {
+               return a.num() / (double) a.den();
+       }
+
+	public static String av_ts_make_string(long ts) {
+               if (ts == AV_NOPTS_VALUE)
+                       return "NOPTS";
+               else
+                       return Long.toHexString(ts);
+       }
+
+	/**
+	 * Original signaturre : #define av_ts2str(ts)
+	 * av_ts_make_string((char[AV_TS_MAX_STRING_SIZE]){0}, ts)
+	 */
+	public static String av_ts2str(long ts) {
+               return av_ts_make_string(ts);
+       }
+
+	public static String av_ts_make_time_string(long ts,
+                       AVRational tb) {
+               if (ts == AV_NOPTS_VALUE)
+                       return "NOPTS";
+               else {
+                       String s = String.format("%.6g", av_q2d(tb) * ts);
+                       return s;
+               }
+       }
+
+	/**
+	 * Original signature : #define av_ts2timestr(ts, tb)
+	 * av_ts_make_time_string((char[AV_TS_MAX_STRING_SIZE]){0}, ts, tb)
+	 */
+	public static String av_ts2timestr(long ts, AVRational tb) {
+               return av_ts_make_time_string(ts, tb);
+       }
+
+}
diff -pruN generated/org/ffmpeg/avutil/AvutilLibrary.java src/org/ffmpeg/avutil/AvutilLibrary.java
--- generated/org/ffmpeg/avutil/AvutilLibrary.java	2014-11-29 21:30:34.976867649 +0100
+++ src/org/ffmpeg/avutil/AvutilLibrary.java	2014-11-29 21:41:15.979467417 +0100
@@ -893,21 +893,21 @@ public class AvutilLibrary {
 	 * Original signature : <code>char* avutil_configuration()</code><br>
 	 * <i>native declaration : libavutil/avutil.h:9</i>
 	 */
-	public static Pointer<Byte > avutil_configuration() {
-		return Pointer.pointerToAddress(avutil_configuration$2(), Byte.class);
+	public static Pointer<Byte > avutil__configuration() {
+		return Pointer.pointerToAddress(avutil_configuration(), Byte.class);
 	}
 	@Ptr 
-	protected native static long avutil_configuration$2();
+	protected native static long avutil_configuration();
 	/**
 	 * Return the libavutil license.<br>
 	 * Original signature : <code>char* avutil_license()</code><br>
 	 * <i>native declaration : libavutil/avutil.h:14</i>
 	 */
-	public static Pointer<Byte > avutil_license() {
-		return Pointer.pointerToAddress(avutil_license$2(), Byte.class);
+	public static Pointer<Byte > avutil__license() {
+		return Pointer.pointerToAddress(avutil_license(), Byte.class);
 	}
 	@Ptr 
-	protected native static long avutil_license$2();
+	protected native static long avutil_license();
 	/**
 	 * Original signature : <code>char* av_get_media_type_string(AVMediaType)</code><br>
 	 * <i>native declaration : libavutil/avutil.h:28</i>
@@ -1042,11 +1042,11 @@ public class AvutilLibrary {
 	 * Original signature : <code>void* av_malloc(size_t)</code><br>
 	 * <i>native declaration : libavutil/mem.h:9</i>
 	 */
-	public static Pointer<? > av_malloc(@Ptr long size) {
-		return Pointer.pointerToAddress(av_malloc$2(size));
+	public static Pointer<? > malloc(@Ptr long size) {
+		return Pointer.pointerToAddress(av_malloc(size));
 	}
 	@Ptr 
-	protected native static long av_malloc$2(@Ptr long size);
+	protected native static long av_malloc(@Ptr long size);
 	/**
 	 * Free a memory block which has been allocated with av_malloc(z)() or<br>
 	 * av_realloc().<br>
diff -pruN generated/org/ffmpeg/FFMPeg.java src/org/ffmpeg/FFMPeg.java
--- generated/org/ffmpeg/FFMPeg.java	1970-01-01 01:00:00.000000000 +0100
+++ src/org/ffmpeg/FFMPeg.java	2014-11-29 21:30:49.870834135 +0100
@@ -0,0 +1,27 @@
+package org.ffmpeg;
+
+import org.ffmpeg.avcodec.AvcodecLibrary;
+import org.ffmpeg.avformat.AvformatLibrary;
+import org.ffmpeg.avutil.AvutilLibrary;
+import org.ffmpeg.swscale.SwscaleLibrary;
+
+public class FFMPeg {
+
+	public static void main(String[] args) {
+		System.out.println("Java-Bibliothek ffmpeg.jar");
+		System.out.println("==========================");
+		System.out.println("Die Bibliothek ffmpeg ist nur in den Bruchteilen implementiert, die für\n"
+				+ "Open Source Physics tracker benötigt werden.");
+		System.out.println("ffmpeg in Version "+AvutilLibrary.FFMPEG_VERSION);
+		System.out.println("Bestandteile:");
+		System.out.println("avutil in Version "+AvutilLibrary.avutil_version());
+		System.out.println("avcodec in Version "+AvcodecLibrary.avcodec_version());
+		System.out.println("avformat in Version "+AvformatLibrary.avformat_version());
+		System.out.println("swscale in Version "+SwscaleLibrary.swscale_version());
+	}
+	
+	public static String getVersion() {
+		return AvutilLibrary.FFMPEG_VERSION;
+	}
+	
+}
diff -pruN generated/org/ffmpeg/swscale/SwscaleLibrary.java src/org/ffmpeg/swscale/SwscaleLibrary.java
--- generated/org/ffmpeg/swscale/SwscaleLibrary.java	2014-11-29 21:30:34.404868936 +0100
+++ src/org/ffmpeg/swscale/SwscaleLibrary.java	2014-11-29 21:30:49.871834132 +0100
@@ -127,20 +127,20 @@ public class SwscaleLibrary {
 	 * Original signature : <code>char* swscale_configuration()</code><br>
 	 * <i>native declaration : libswscale/swscale.h:3</i>
 	 */
-	public static Pointer<Byte > swscale_configuration() {
-		return Pointer.pointerToAddress(swscale_configuration$2(), Byte.class);
+	public static Pointer<Byte > swscale__configuration() {
+		return Pointer.pointerToAddress(swscale_configuration(), Byte.class);
 	}
 	@Ptr 
-	protected native static long swscale_configuration$2();
+	protected native static long swscale_configuration();
 	/**
 	 * Original signature : <code>char* swscale_license()</code><br>
 	 * <i>native declaration : libswscale/swscale.h:5</i>
 	 */
-	public static Pointer<Byte > swscale_license() {
-		return Pointer.pointerToAddress(swscale_license$2(), Byte.class);
+	public static Pointer<Byte > swscale__license() {
+		return Pointer.pointerToAddress(swscale_license(), Byte.class);
 	}
 	@Ptr 
-	protected native static long swscale_license$2();
+	protected native static long swscale_license();
 	/**
 	 * Original signature : <code>void sws_freeContext(SwsContext*)</code><br>
 	 * <i>native declaration : libswscale/swscale.h:8</i>
diff -pruN generated/org/ffmpeg/util/AlignmentCustomizer.java src/org/ffmpeg/util/AlignmentCustomizer.java
--- generated/org/ffmpeg/util/AlignmentCustomizer.java	1970-01-01 01:00:00.000000000 +0100
+++ src/org/ffmpeg/util/AlignmentCustomizer.java	2014-11-30 02:59:36.293274904 +0100
@@ -0,0 +1,26 @@
+package org.ffmpeg.util;
+
+import java.util.List;
+
+import org.bridj.Platform;
+import org.bridj.StructCustomizer;
+import org.bridj.StructDescription;
+import org.bridj.StructFieldDescription;
+import org.bridj.ann.Alignment;
+
+@SuppressWarnings("deprecation")
+public class AlignmentCustomizer extends StructCustomizer {
+	@Override
+	public void beforeLayout(StructDescription desc,
+			List<StructFieldDescription> aggregatedFields) {
+		for (StructFieldDescription field : aggregatedFields) {
+			if(field.field.isAnnotationPresent(Alignment.class))
+				continue;
+			if (Platform.isLinux() && !Platform.is64Bits()) {
+				field.alignment = 4;
+			} else {
+				field.alignment = 8;
+			}
+		}
+	}
+}
diff -pruN generated/test/AVInfo.java src/test/AVInfo.java
--- generated/test/AVInfo.java	1970-01-01 01:00:00.000000000 +0100
+++ src/test/AVInfo.java	2014-11-29 21:30:49.871834132 +0100
@@ -0,0 +1,64 @@
+package test;
+
+import static org.ffmpeg.avformat.AvformatLibrary.av_dump_format;
+import static org.ffmpeg.avformat.AvformatLibrary.av_register_all;
+import static org.ffmpeg.avformat.AvformatLibrary.avformat_close_input;
+import static org.ffmpeg.avformat.AvformatLibrary.avformat_open_input;
+
+import java.io.IOException;
+
+import org.bridj.Pointer;
+import org.ffmpeg.avformat.AVFormatContext;
+import org.ffmpeg.avformat.AVStream;
+
+public class AVInfo {
+	public static String src_filename;
+	public static Pointer<AVFormatContext> fmt_ctx;
+	public static Pointer<AVStream> stream;
+	
+	public static void main(String[] args) {
+		int ret = 0;
+
+		if (args.length != 1) {
+			System.err.printf("usage: AVInfo input_file \n"
+					+ "API example program to show input file infos.\n" + "\n");
+			System.exit(1);
+		}
+		src_filename = args[0];
+		try {
+			/* register all formats and codecs */
+			av_register_all();
+
+			/* open input file, and allocate format context */
+			Pointer<Pointer<AVFormatContext>> pfmt_ctx = Pointer
+					.allocatePointer(AVFormatContext.class);
+			if (avformat_open_input(pfmt_ctx,
+					Pointer.pointerToCString(src_filename), null, null) < 0) {
+				System.err.printf("Could not open source file %s\n",
+						src_filename);
+				System.exit(1);
+			}
+
+			fmt_ctx = pfmt_ctx.get();
+			/* dump input information to stderr */
+			av_dump_format(fmt_ctx, 0, Pointer.pointerToCString(src_filename), 0);
+
+			int streams = fmt_ctx.get().nb_streams();
+			for(int index = 0;index<streams;index++){
+				stream = fmt_ctx.get().streams().get(index);
+				
+			}
+			// } catch (IOException e) {
+			// e.printStackTrace();
+			// System.exit(1);
+		} finally {
+			System.err.print("freeing fmt_ctx...");
+			if (fmt_ctx != null) {
+				avformat_close_input(fmt_ctx.getReference());
+			}
+			System.err.println("freed");
+			System.exit(ret);
+		}
+	}
+
+}
diff -pruN generated/test/Demuxing.java src/test/Demuxing.java
--- generated/test/Demuxing.java	1970-01-01 01:00:00.000000000 +0100
+++ src/test/Demuxing.java	2014-11-30 02:32:49.235176807 +0100
@@ -0,0 +1,390 @@
+package test;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.IntBuffer;
+
+import org.bridj.IntValuedEnum;
+import org.bridj.Pointer;
+import org.ffmpeg.avcodec.AVCodec;
+import org.ffmpeg.avcodec.AVCodecContext;
+import org.ffmpeg.avcodec.AvcodecLibrary;
+import org.ffmpeg.avcodec.AVPacket;
+import org.ffmpeg.avformat.AVFormatContext;
+import org.ffmpeg.avformat.AVStream;
+import org.ffmpeg.avformat.AvformatLibrary;
+import org.ffmpeg.avutil.AVFrame;
+import org.ffmpeg.avutil.AvutilLibrary;
+import org.ffmpeg.avutil.AvutilLibrary.AVMediaType;
+import org.ffmpeg.avutil.AvutilLibrary.AVSampleFormat;
+
+import static org.ffmpeg.avcodec.AvcodecLibrary.*;
+import static org.ffmpeg.avutil.AvutilLibrary.*;
+import static org.ffmpeg.avformat.AvformatLibrary.*;
+import static org.ffmpeg.avutil.AVUtil.*;
+import static org.ffmpeg.avutil.AvutilLibrary.AVSampleFormat.*;
+
+/**
+ * @file libavformat demuxing API use example.
+ * 
+ *       Show how to use the libavformat and libavcodec API to demux and decode
+ *       audio and video data.
+ * @example doc/examples/demuxing.c
+ */
+
+public class Demuxing {
+	static Pointer<AVFormatContext> fmt_ctx = null;
+	static Pointer<AVCodecContext> video_dec_ctx = null, audio_dec_ctx;
+	static Pointer<AVStream> video_stream = null, audio_stream = null;
+	static Pointer<Byte> streamptr = null; 
+	static String src_filename = null;
+	static String video_dst_filename = null;
+	static String audio_dst_filename = null;
+	static FileOutputStream video_dst_file = null;
+	static FileOutputStream audio_dst_file = null;
+
+	static Pointer<Pointer<Byte>> video_dst_data = Pointer.allocatePointers(Byte.class, 4);
+	static Pointer<Integer> video_dst_linesize = Pointer.allocateInts(4);
+	static int video_dst_bufsize;
+
+	static Pointer<Integer> video_stream_idx = Pointer.allocateInt(), 
+			audio_stream_idx = Pointer.allocateInt();
+	static Pointer<AVFrame> frame = null;
+	static Pointer<AVPacket> pkt = null;
+	static int video_frame_count = 0;
+	static int audio_frame_count = 0;
+	static AvformatLibrary lavf = new AvformatLibrary();
+	static AvcodecLibrary lavc = new AvcodecLibrary();
+	static AvutilLibrary lavu = new AvutilLibrary();
+	
+	static boolean first_frame = true;
+
+	static int decode_packet(Pointer<Integer> got_frame, int cached)
+			throws IOException {
+		int ret = 0;
+		int decoded = pkt.get().size();
+		got_frame.setInt(0);
+
+		if (pkt.get().stream_index() == video_stream_idx.get()) {
+			/* decode video frame */
+			ret = avcodec_decode_video2(video_dec_ctx, frame, got_frame,
+					pkt);
+			if (ret < 0) {
+				System.err.printf("Error decoding video frame\n");
+				return ret;
+			}
+
+			if (got_frame.get() != 0) {
+				if(first_frame) {
+					first_frame = false;
+					StructInfo.printAVFrame(frame.get());
+				}
+				System.out.printf("video_frame%s n:%d coded_n:%d pts:%s\n",
+						cached != 0 ? "(cached)" : "", video_frame_count++,
+						frame.get().coded_picture_number(), av_ts2timestr(
+								frame.get().pts(), video_dec_ctx.get().time_base()));
+
+				/*
+				 * copy decoded frame to destination buffer: this is required
+				 * since rawvideo expects non aligned data
+				 */
+				av_image_copy(video_dst_data, video_dst_linesize,
+						frame.get().data(), frame.get().linesize(), video_dec_ctx.get().pix_fmt(),
+						video_dec_ctx.get().width(), video_dec_ctx.get().height());
+
+				/* write to rawvideo file */
+				streamptr = video_dst_data.get();
+				video_dst_file.write(streamptr.getBytes(video_dst_bufsize));
+			}
+		} else if (pkt.get().stream_index() == audio_stream_idx.get()) {
+			/* decode audio frame */
+			ret = avcodec_decode_audio4(audio_dec_ctx, frame, got_frame,
+					pkt);
+			if (ret < 0) {
+				System.err.printf("Error decoding audio frame\n");
+				return ret;
+			}
+			/*
+			 * Some audio decoders decode only part of the packet, and have to
+			 * be called again with the remainder of the packet data. Sample:
+			 * fate-suite/lossless-audio/luckynight-partial.shn Also, some
+			 * decoders might over-read the packet.
+			 */
+			decoded = Math.min(ret, pkt.get().size());
+
+			if (got_frame.get() != 0) {
+				int unpadded_linesize = frame.get().nb_samples()
+						* av_get_bytes_per_sample(AVSampleFormat.fromValue(frame.get().format()));
+				System.out.printf("audio_frame%s n:%d nb_samples:%d pts:%s\n",
+						cached != 0 ? "(cached)" : "", audio_frame_count++,
+						frame.get().nb_samples(), av_ts2timestr(frame.get().pts(),
+								audio_dec_ctx.get().time_base()));
+
+				/*
+				 * Write the raw audio data samples of the first plane. This
+				 * works fine for packed formats (e.g. AV_SAMPLE_FMT_S16).
+				 * However, most audio decoders output planar audio, which uses
+				 * a separate plane of audio samples for each channel (e.g.
+				 * AV_SAMPLE_FMT_S16P). In other words, this code will write
+				 * only the first audio channel in these cases. You should use
+				 * libswresample or libavfilter to convert the frame to packed
+				 * data.
+				 */
+				streamptr = frame.get().extended_data().get();
+				audio_dst_file.write(streamptr.getBytes(unpadded_linesize));
+			}
+		}
+
+		return decoded;
+	}
+
+	static int open_codec_context(Pointer<Integer> stream_idx,
+			Pointer<AVFormatContext> fmt_ctx, AVMediaType type) {
+		int ret;
+		Pointer<AVStream> st;
+		Pointer<AVCodecContext> dec_ctx = null;
+		Pointer<AVCodec> dec = null;
+
+		ret = av_find_best_stream(fmt_ctx, type, -1, -1, null, 0);
+		if (ret < 0) {
+			System.err.printf("Could not find %s stream in input file '%s'\n",
+					av_get_media_type_string(type).getCString(), src_filename);
+			return ret;
+		} else {
+			stream_idx.set(ret);
+			st = fmt_ctx.get().streams().get(stream_idx.get());
+
+			/* find decoder for the stream */
+			dec_ctx = st.get().codec();
+			dec = avcodec_find_decoder(dec_ctx.get().codec_id());
+			if (dec == null) {
+				System.err.printf("Failed to find %s codec\n",
+						av_get_media_type_string(type));
+				return ret;
+			}
+
+			if ((ret = avcodec_open2(dec_ctx, dec, null)) < 0) {
+				System.err.printf("Failed to open %s codec\n",
+						av_get_media_type_string(type));
+				return ret;
+			}
+		}
+
+		return 0;
+	}
+
+	static String get_format_from_sample_fmt(IntValuedEnum<AVSampleFormat> sample_fmt) {
+		if(sample_fmt.value() == AV_SAMPLE_FMT_U8.value())
+			return "u8";
+		else if(sample_fmt.value() == AV_SAMPLE_FMT_S16.value())
+			return "s16le";
+		else if(sample_fmt.value() == AV_SAMPLE_FMT_S32.value())
+			return "s32le";
+		else if(sample_fmt.value() == AV_SAMPLE_FMT_FLT.value())
+			return "f32le";
+		else if(sample_fmt.value() == AV_SAMPLE_FMT_DBL.value())
+			return "f64le";
+		System.err.printf(
+				"sample format %s is not supported as output format\n",
+				av_get_sample_fmt_name(sample_fmt));
+		return null;
+	}
+
+	public static void main(String[] args) throws IOException {
+		int ret = 0;
+		Pointer<Integer> got_frame = Pointer.allocateInt();
+		got_frame.set(0);
+		video_stream_idx.set(-1);
+		audio_stream_idx.set(-1);
+		if (args.length != 3) {
+			System.err
+					.printf("usage: Demuxing input_file video_output_file audio_output_file\n"
+							+ "API example program to show how to read frames from an input file.\n"
+							+ "This program reads frames from a file, decodes them, and writes decoded\n"
+							+ "video frames to a rawvideo file named video_output_file, and decoded\n"
+							+ "audio frames to a rawaudio file named audio_output_file.\n"
+							+ "\n");
+			System.exit(1);
+		}
+		src_filename = args[0];
+		video_dst_filename = args[1];
+		audio_dst_filename = args[2];
+
+		try {
+			/* register all formats and codecs */
+			av_register_all();
+
+			/* open input file, and allocate format context */
+			Pointer<Pointer<AVFormatContext>> pfmt_ctx = Pointer.allocatePointer(AVFormatContext.class);
+			if (avformat_open_input(pfmt_ctx, Pointer.pointerToCString(src_filename), null, null) < 0) {
+				System.err.printf("Could not open source file %s\n",
+						src_filename);
+				System.exit(1);
+			}
+
+			fmt_ctx = pfmt_ctx.get();
+			/* retrieve stream information */
+			if (avformat_find_stream_info(fmt_ctx, null) < 0) {
+				System.err.printf("Could not find stream information\n");
+				System.exit(1);
+			}
+			
+			if (open_codec_context(video_stream_idx, fmt_ctx,
+					AVMediaType.AVMEDIA_TYPE_VIDEO) >= 0) {
+				video_stream = fmt_ctx.get().streams().get(video_stream_idx.get());
+				video_dec_ctx = video_stream.get().codec();
+
+				try {
+					video_dst_file = new FileOutputStream(video_dst_filename);
+				} catch (IOException e) {
+					System.err.printf("Could not open destination file %s\n",
+							video_dst_filename);
+					ret = 1;
+					System.exit(1);
+				}
+
+				/* allocate image where the decoded image will be put */
+				ret = av_image_alloc(video_dst_data, video_dst_linesize,
+						video_dec_ctx.get().width(), video_dec_ctx.get().height(),
+						video_dec_ctx.get().pix_fmt(), 1);
+				if (ret < 0) {
+					System.err.printf("Could not allocate raw video buffer\n");
+					System.exit(ret);
+				}
+				video_dst_bufsize = ret;
+			}
+
+			if (open_codec_context(audio_stream_idx, fmt_ctx,
+					AVMediaType.AVMEDIA_TYPE_AUDIO) >= 0) {
+				audio_stream = fmt_ctx.get().streams().get(audio_stream_idx.get());
+				audio_dec_ctx = audio_stream.get().codec();
+				try {
+					audio_dst_file = new FileOutputStream(audio_dst_filename);
+				} catch (IOException e) {
+					System.err.printf("Could not open destination file %s\n",
+							video_dst_filename);
+					System.exit(1);
+				}
+			}
+
+			/* dump input information to stderr */
+			av_dump_format(fmt_ctx, 0, Pointer.pointerToCString(src_filename), 0);
+
+			if (audio_stream == null && video_stream == null) {
+				System.err
+						.printf("Could not find audio or video stream in the input, aborting\n");
+				System.exit(1);
+			}
+
+			frame = alloc_frame();
+			if (frame == null) {
+				System.err.printf("Could not allocate frame\n");
+				System.exit(1);
+			}
+
+			/* initialize packet, set data to null, let the demuxer fill it */
+			pkt = Pointer.allocate(AVPacket.class);
+			av_init_packet(pkt);
+			pkt.get().data(null);
+			pkt.get().size(0);
+
+			if (video_stream != null)
+				System.out.printf("Demuxing video from file '%s' into '%s'\n",
+						src_filename, video_dst_filename);
+			if (audio_stream != null)
+				System.out.printf("Demuxing audio from file '%s' into '%s'\n",
+						src_filename, audio_dst_filename);
+
+			/* read frames from the file */
+			while (av_read_frame(fmt_ctx, pkt) >= 0) {
+				Pointer<AVPacket> orig_pkt = pkt;
+				do {
+					ret = decode_packet(got_frame, 0);
+					if (ret < 0)
+						break;
+					long ptr = pkt.get().data().getPeer();
+					ptr+=ret;
+					pkt.get().data((Pointer<Byte>)Pointer.pointerToAddress(ptr));
+					pkt.get().size(pkt.get().size()-ret);
+				} while (pkt.get().size() > 0);
+				av_free_packet(orig_pkt);
+			}
+
+			/* flush cached frames */
+			pkt.get().data(null);
+			pkt.get().size(0);
+			do {
+				got_frame.set(0);
+				decode_packet(got_frame, 1);
+			} while (got_frame.get() != 0);
+
+			System.out.printf("Demuxing succeeded.\n");
+
+			if (video_stream != null) {
+				System.out
+						.printf("Play the output video file with the command:\n"
+								+ "ffplay -f rawvideo -pix_fmt %s -video_size %dx%d %s\n",
+								av_get_pix_fmt_name(video_dec_ctx.get().pix_fmt()).getCString(),
+								video_dec_ctx.get().width(), video_dec_ctx.get().height(),
+								video_dst_filename);
+			}
+
+			if (audio_stream != null) {
+				IntValuedEnum<AVSampleFormat> sfmt = audio_dec_ctx.get().sample_fmt();
+				int n_channels = audio_dec_ctx.get().channels();
+				String fmt;
+
+				if (av_sample_fmt_is_planar(sfmt) != 0) {
+					String packed = av_get_sample_fmt_name(sfmt).getCString();
+					System.out
+							.printf("Warning: the sample format the decoder produced is planar "
+									+ "(%s). This example will output the first channel only.\n",
+									packed != null ? packed : "?");
+					sfmt = av_get_packed_sample_fmt(sfmt);
+					n_channels = 1;
+				}
+
+				if ((fmt = get_format_from_sample_fmt(sfmt)) == null)
+					System.exit(-1);
+				ret = 0;
+				System.out.printf(
+						"Play the output audio file with the command:\n"
+								+ "ffplay -f %s -ac %d -ar %d %s\n", fmt,
+						n_channels, audio_dec_ctx.get().sample_rate(),
+						audio_dst_filename);
+			}
+
+		} catch (IOException e) {
+			e.printStackTrace();
+			System.exit(1);
+		} finally {
+			System.err.print("freeing video_dec_ctx..");
+			if (video_dec_ctx != null)
+				avcodec_close(video_dec_ctx);
+			System.err.println("freed");
+			System.err.print("freeing audio_dec_ctx...");
+			if (audio_dec_ctx != null)
+				avcodec_close(audio_dec_ctx);
+			System.err.println("freed");
+			System.err.print("freeing fmt_ctx...");
+			if(fmt_ctx != null) {
+				avformat_close_input(fmt_ctx.getReference());
+			}
+			System.err.println("freed");
+			if (video_dst_file != null)
+				video_dst_file.close();
+			if (audio_dst_file != null)
+				audio_dst_file.close();
+			System.err.print("freeing frame...");
+			if(frame != null)
+				av_free(frame);
+			System.err.println("freed");
+			System.err.print("freeing video_dst_data...");
+			if(video_dst_data != null && video_dst_data.getValidElements() > 0)
+				av_freep(video_dst_data);
+			System.err.println("freed");
+		}
+		System.exit(ret);
+	}
+}
diff -pruN generated/test/StructInfo.java src/test/StructInfo.java
--- generated/test/StructInfo.java	1970-01-01 01:00:00.000000000 +0100
+++ src/test/StructInfo.java	2014-11-29 23:57:51.217201282 +0100
@@ -0,0 +1,55 @@
+package test;
+
+import java.lang.reflect.Field;
+import java.util.List;
+
+import org.bridj.StructFieldDescription;
+import org.bridj.StructObject;
+import org.ffmpeg.avcodec.AVPacket;
+import org.ffmpeg.avutil.AVFrame;
+
+public class StructInfo {
+	
+	public static void printAVFrame(AVFrame f) {
+		System.out.println(f);
+		List<StructFieldDescription> fields = f.getDescriptions();
+		for(int index=0;index<fields.size();index++)
+			try {
+				System.out.println("\t["+index+"]: "+fields.get(index)+ printField(f,index));
+			} catch (IllegalArgumentException e){
+				System.out.println("Illegal Argument Exception");
+			} catch (SecurityException e) {
+				System.out.println("Security Exception");
+			}
+	}
+
+	public static void printAVPacket(AVPacket f) {
+		System.out.println(f);
+		List<StructFieldDescription> fields = f.getDescriptions();
+		for(int index=0;index<fields.size();index++)
+			try {
+				System.out.println("\t["+index+"]: "+fields.get(index)+ printField(f,index));
+			} catch (IllegalArgumentException e){
+				System.out.println("Illegal Argument Exception");
+			} catch (SecurityException e) {
+				System.out.println("Security Exception");
+			}
+	}
+
+	public static String printField(StructObject f, int index) {
+		String ret = "";
+		Field[] fields = f.getClass().getFields();
+		if(fields.length < index+1)
+			return ret;
+		Field fi = fields[index];
+		ret = "("+fi.getName()+"|";
+		try {
+			ret = ret + fi.get(f)+")";
+		} catch (IllegalArgumentException e) {
+			ret = ret + " - )";
+		} catch (IllegalAccessException e) {
+			ret = ret + " - )";
+		}
+		return ret;
+	}
+}
